{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../enrich/src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { appConfig } from './config/appConfig';\r\nimport { RedisAdapter } from '../../shared/redis/redis';\r\nimport RSMQWorker from 'rsmq-worker';\r\n\r\nconst redisQueueName = process.env.redisQueueName || 'task2';\r\nconst redisEnv = process.env.redisEnv || 'localhost';\r\nconst worker = new RSMQWorker(redisQueueName, { host: redisEnv, interval: 0 });\r\nconst redis = new RedisAdapter();\r\n\r\nlet avgTime = 0;\r\nlet numberOfRounds = 0;\r\nlet roundTime = 0;\r\n\r\n\r\nredis.initClientConnection(redisEnv)\r\n    .then((client) => {\r\n\r\n      const radisStartTime = new Date().getTime();\r\n      console.log('enriching...');\r\n\r\n      worker.on('message', (msg, next, id) => {\r\n        const end = new Date().getTime();\r\n        const parsedData = (JSON.parse(msg));\r\n        // console.log(`${numberOfRounds} number of rounds`);\r\n\r\n        if (radisStartTime > parsedData.start) {\r\n          // console.log('pass');\r\n          next();\r\n        }\r\n        else {\r\n          const timeSec = (end - parsedData.start) * 0.001;\r\n          numberOfRounds++;\r\n          avgTime += timeSec;\r\n          // console.log(`batch ${numberOfRounds} time: ${(timeSec)} sec`);\r\n          roundTime += timeSec;\r\n\r\n          if (numberOfRounds % appConfig.totalNumberOfRounds == 0) {\r\n            console.log(`\\n********************************************`);\r\n            console.log(`Average time for this round: ${roundTime / appConfig.totalNumberOfRounds}`);\r\n            // console.log(`Finished ${numberOfRounds} number of rounds`);\r\n            console.log(`avg time: ${(avgTime / numberOfRounds)} sec`);\r\n            console.log(`Total entities : ${numberOfRounds * appConfig.batchNumber }`);\r\n            console.log(`********************************************\\n`);\r\n            roundTime = 0;\r\n\r\n          }\r\n\r\n          // const newList = createList(parsedData.message);\r\n          // redis.saveInRedis(newList, appConfig.keyId).then(() => {\r\n          worker.del(id);\r\n          next();\r\n          // });\r\n        }\r\n      });\r\n      worker.start();\r\n    });\r\n\r\n// function createList(msg): Array<any> {\r\n//   const data = msg;\r\n//   const newList = [];\r\n//   data.forEach(x => {\r\n//     const newData = { ...x, status: 12 };\r\n//     newList.push(newData);\r\n//   });\r\n//   return newList;\r\n// }\r\n\r\n// }, 3000);\r\n\r\n// (function Worker(redisQueueName) {\r\n//\r\n//   worker.on('message', (msg, next, id) => {\r\n//     console.log('Message id : ' + id);\r\n//     // console.log(msg);\r\n//     const data = JSON.parse(msg);\r\n//     const newList = [];\r\n//     data.forEach(x => {\r\n//       const newData = { ...x, status: 12 };\r\n//       newList.push(newData);\r\n//     });\r\n//     // console.log(newList);\r\n//     redis.saveInRedis(newList, appConfig.keyId);\r\n//     next();\r\n//   });\r\n//   worker.start();\r\n// })();\r\n\r\n// redis.initRMSQ(redisQueueName).then(rsmq => {\r\n// redis.reciveMessageNDo((message) => {\r\n//       return new Promise((resolve, reject) => {\r\n//           console.log(message);\r\n//         return resolve(message);\r\n//         // const newList = [];\r\n//         // const list = JSON.parse(message.message);\r\n//         // list.forEach((x) => {\r\n//         //   const newData = {...x , status: 12};\r\n//         //   newList.push(newData);\r\n//         // });\r\n//         // console.log(newList);\r\n//         // redis.saveInRedis(newList, appConfig.keyId);\r\n//\r\n//       });\r\n//     });\r\n// });\r\n// getNwork(workMessage);\r\n\r\n"]}