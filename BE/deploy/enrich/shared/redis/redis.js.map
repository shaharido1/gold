{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../../shared/redis/redis.ts"],"names":[],"mappings":";;;;;AAAA,kDAAkD;AAGlD;IAOE,oBAAoB,CAAC,QAAQ;QAC3B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;gBACpC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;qBACtB,IAAI,CAAC,GAAG,EAAE;oBACT,aAAa,CAAC,YAAY,CAAC,CAAC;oBAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;oBACjC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9B,CAAC,CAAC;qBACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAGO,YAAY,CAAC,QAAQ;QAC3B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,eAAK,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;YACrD,uDAAuD;YACvD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBAC3B,OAAO,OAAO,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;gBAC9B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjB,OAAO,MAAM,EAAE,CAAC;YAClB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,WAAW,CAAC,IAAI,EAAE,GAAG;QACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAClB,+BAA+B;gBAC/B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;oBAC7F,+BAA+B;oBAC/B,IAAI,GAAG,EAAE;wBACP,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;gBAC/B,IAAI,OAAO,EAAE;oBACX,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;iBACzB;gBACD,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;gBACpE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QAEL,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;AA5DD,oCA4DC","sourcesContent":["import redis, { Multi, RedisClient } from 'redis';\r\n\r\n\r\nexport class RedisAdapter {\r\n\r\n  multi: Multi;\r\n  client: RedisClient;\r\n  RedisAdapter: RedisAdapter;\r\n\r\n\r\n  initClientConnection(redisEnv): Promise<RedisClient> {\r\n    return new Promise((resolve, reject) => {\r\n      const tryToConnect = setInterval(() => {\r\n        this.redisConnect(redisEnv)\r\n            .then(() => {\r\n              clearInterval(tryToConnect);\r\n              this.multi = this.client.multi();\r\n              console.log('redis Created');\r\n              return resolve(this.client);\r\n            })\r\n            .catch(err => err);\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n\r\n  private redisConnect(redisEnv) {\r\n    return new Promise((resolve, reject) => {\r\n      this.client = redis.createClient({ host: redisEnv });\r\n      // this.client = redis.createClient({ host: 'redis' });\r\n      this.client.on('ready', () => {\r\n        return resolve();\r\n      });\r\n      this.client.on('error', (err) => {\r\n        console.log(err);\r\n        return reject();\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  saveInRedis(list, key) {\r\n    return new Promise((resolve, reject) => {\r\n      list.forEach(data => {\r\n        // console.log(typeof data.id);\r\n        this.multi.hmset(`${key}:${data.id.toString()}`, 'massage', JSON.stringify(data), (err, res) => {\r\n          // console.log('redis:' + res);\r\n          if (err) {\r\n            console.error(err);\r\n          }\r\n        });\r\n      });\r\n      this.multi.exec((err, replies) => {\r\n        if (replies) {\r\n          return resolve(replies);\r\n        }\r\n        err ? console.log(err) : console.log('error with no error message');\r\n        return reject(err);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n}"]}