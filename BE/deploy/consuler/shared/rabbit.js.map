{"version":3,"file":"rabbit.js","sourceRoot":"","sources":["../../../shared/rabbit.ts"],"names":[],"mappings":"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","sourcesContent":["import amqp, { Channel, Connection } from \"amqplib/callback_api\";\r\nimport { Observable } from \"rxjs/internal/Observable\";\r\nimport { Replies } from \"amqplib/properties\";\r\n\r\nexport interface rabbitAddress {\r\n  port: string,\r\n  host: string\r\n}\r\n\r\nexport class Rabbit {\r\n  private rabbitAddress: rabbitAddress;\r\n  private rabbitConnection: Connection;\r\n  private rabbitChannel: Channel;\r\n\r\n  constructor(rabbitAddress?: rabbitAddress) {\r\n    this.rabbitAddress = rabbitAddress || {\r\n          host: process.env.rabbitHost || \"10.0.75.1\",\r\n          port: process.env.rabbitPort || \"5672\"\r\n        };\r\n  }\r\n\r\n  initConnection(queue) : Promise<{ok: Replies.AssertQueue, channel: Channel}> {\r\n    return new Promise((resolve, reject) => {\r\n      this.intervalConnection().then(() => {\r\n        this.createChannel().then(() => {\r\n          this.assertQueue(queue).then(ok => {\r\n            return resolve({ok: ok, channel: this.rabbitChannel})\r\n          })\r\n        })\r\n      }).catch(() => reject(\"failed to connect\"))\r\n    })\r\n  }\r\n\r\n  private intervalConnection(): Promise<Connection> {\r\n    return new Promise((resolve, reject) => {\r\n      const tryToConnect = setInterval(() => {\r\n        this.connect()\r\n            .then((connection) => {\r\n              clearInterval(tryToConnect);\r\n              return resolve(connection);\r\n            })\r\n            .catch(err => err);\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  private connect(): Promise<Connection> {\r\n    return new Promise((resolve, reject) => {\r\n      console.log(\"trying to connect to \" + `amqp://guest:guest@${this.rabbitAddress.host}:${this.rabbitAddress.port}`);\r\n      amqp.connect(`amqp://guest:guest@${this.rabbitAddress.host}:${this.rabbitAddress.port}`, (err, conn) => {\r\n        if (conn) {\r\n          console.log(\"connected to rabbit!\");\r\n          this.rabbitConnection = conn;\r\n          return resolve(conn);\r\n        }\r\n        else if (err) {\r\n          console.log(\"fail to connect\");\r\n          console.log(err);\r\n          return reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private createChannel(connection?): Promise<Channel> {\r\n    return new Promise((resolve, reject) => {\r\n      const conn = connection || this.rabbitConnection;\r\n      conn.createChannel((err, channel) => {\r\n        if (channel) {\r\n          this.rabbitChannel = channel;\r\n          return resolve(channel);\r\n        }\r\n        else if (err) {\r\n          console.log(\"fail to connect\");\r\n          console.log(err);\r\n          return reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  private assertQueue(queue, options?): Promise<Replies.AssertQueue> {\r\n    return new Promise((resolve, reject) => {\r\n      this.rabbitChannel.assertQueue(queue, options, (err, ok) => {\r\n        if (ok) {\r\n          return resolve(ok)\r\n        }\r\n        else if (err) {\r\n          console.log(err);\r\n          return reject();\r\n        }\r\n      })\r\n    })\r\n\r\n    }\r\n\r\n\r\n}"]}