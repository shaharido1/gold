{"version":3,"file":"redisMQ.js","sourceRoot":"","sources":["../../../../shared/redis/redisMQ.ts"],"names":[],"mappings":"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","sourcesContent":["import { RedisAdapter } from './redis';\r\nimport { RedisClient } from 'redis';\r\nimport RSMQPromise from 'rsmq-promise';\r\n\r\nexport class RedisMqAdapter extends RedisAdapter {\r\n\r\n  client: RedisClient;\r\n  rsmq: RSMQPromise;\r\n  private qname: string;\r\n  private unDeletedMsg: Array<string> = [];\r\n\r\n  initRMSQ(qname, redisEnv): Promise<RSMQPromise> {\r\n    return new Promise((resolve, reject) => {\r\n      this.initClientConnection(redisEnv)\r\n          .then(client => {\r\n            this.client = client;\r\n            this.rsmq = new RSMQPromise({client});\r\n            this.assertQueue(qname)\r\n                .then(() => {\r\n                  console.log('finished assert Q');\r\n                  this.qname = qname;\r\n                  return resolve(this.rsmq);\r\n                });\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            return reject(err);\r\n          });\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n  private assertQueue(qname): Promise<void> {\r\n    return new Promise((reoslve, reject) => {\r\n      this.client.exists(`rsmq:${qname}:Q`, (err, res) => {\r\n        if (res >= 1) {\r\n          console.log(`Queue ${qname} already exist`);\r\n          return reoslve();\r\n        }\r\n        if (err) {\r\n          console.error(err);\r\n        }\r\n        else {\r\n          console.log(`creating Queue ${qname}`);\r\n          this.rsmq.createQueue({ qname: qname })\r\n              .then(() => {\r\n                console.log('Queue created!');\r\n                return reoslve();\r\n              })\r\n              .catch(err => {\r\n                if (err) {\r\n                  console.error(err);\r\n                  return reject();\r\n                }\r\n              });\r\n        }\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  reciveMessageNDo(workToDo: (message) => Promise<any>) {\r\n    this.rsmq.receiveMessage({ qname: this.qname }).then((message) => {\r\n      if (message && Object.keys(message).length) {\r\n        workToDo(message).then(message => {\r\n          this.rsmq.deleteMessage({ qname: this.qname, id: message.id }, (err, resp) => {\r\n            if (resp === 1) {\r\n              this.reciveMessageNDo(workToDo);\r\n            }\r\n            else {\r\n              this.unDeletedMsg.push(message.id);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      else {\r\n        console.log('no message');\r\n        setTimeout(() => {\r\n          this.reciveMessageNDo(workToDo);\r\n        }, 200);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}"]}