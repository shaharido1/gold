{"version":3,"file":"server.js","sourceRoot":"","sources":["../../mock/mock_prod/src/server.ts"],"names":[],"mappings":";;AAAA,kDAA+C;AAE/C,MAAM,IAAI,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAElC,MAAM,WAAW,GAAG,MAAM,CAAC,qBAAS,CAAC,WAAW,CAAC,CAAC;AAElD,UAAU,CAAC,GAAG,EAAE;IACd,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,sBAAsB,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IAChH,IAAI,CAAC,OAAO,CAAC,sBAAsB,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACnG,IAAI,IAAI,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE;gBAC7B,MAAM,CAAC,GAAG,MAAM,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,IAAI,UAAU,GAAG,CAAC,CAAC;gBAEnB,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAClB,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;oBACpC,MAAM,QAAQ,GAAG,EAAE,CAAC;oBACpB,OAAO,CAAC,GAAG,WAAW,EAAE;wBACtB,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;wBACpB,MAAM,GAAG,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;wBAChD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACnB,CAAC,EAAE,CAAC;qBAEL;oBACD,CAAC,GAAG,CAAC,CAAC;oBACN,yBAAyB;oBACzB,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;oBACnC,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,KAAK,GAAG,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;oBAExH,UAAU,IAAI,WAAW,CAAC;oBAC1B,+CAA+C;oBAC/C,sDAAsD;oBACtD,iCAAiC;oBACjC,IAAI;gBACN,CAAC,EAAE,qBAAS,CAAC,WAAW,GAAG,EAAE,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;SACJ;aACI;YACH,IAAI,GAAG,EAAE;gBACP,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aAClB;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC,EAAE,KAAK,CAAC,CAAC","sourcesContent":["import { appConfig } from './config/appConfig';\r\n\r\nconst amqp = require('amqplib/callback_api');\r\nconst uuidv4 = require('uuid/v4');\r\n\r\nconst batchNumber = Number(appConfig.batchNumber);\r\n\r\nsetTimeout(() => {\r\n  console.log('trying to connect to ' + `amqp://guest:guest@${process.env.rabbitHost}:${process.env.rabbitPort}`);\r\n  amqp.connect(`amqp://guest:guest@${process.env.rabbitHost}:${process.env.rabbitPort}`, (err, conn) => {\r\n    if (conn) {\r\n      console.log('connected to rabbitMQ');\r\n      conn.createChannel((err, ch) => {\r\n        const q = 'task';\r\n        let i = 0;\r\n        let totalLines = 0;\r\n\r\n        ch.assertQueue(q);\r\n        const stopFunction = setInterval(() => {\r\n          const mockData = [];\r\n          while (i < batchNumber) {\r\n            const id = uuidv4();\r\n            const msg = { massage: `ms-${i}`, id: `${id}` };\r\n            mockData.push(msg);\r\n            i++;\r\n\r\n          }\r\n          i = 0;\r\n          // console.log(mockData);\r\n          const start = new Date().getTime();\r\n          ch.sendToQueue(q, Buffer.from(`{\"message\":${JSON.stringify(mockData)} ,\"rabbitStart\":${start}}`), { persistent: true });\r\n\r\n          totalLines += batchNumber;\r\n          // console.log(`Lines ${totalLines} was send`);\r\n          // if (totalLines === appConfig.totalNumberOfRounds) {\r\n          //   clearInterval(stopFunction);\r\n          // }\r\n        }, appConfig.batchNumber / 10);\r\n      });\r\n    }\r\n    else {\r\n      if (err) {\r\n        console.log('fail to connect');\r\n        console.log(err);\r\n      }\r\n    }\r\n  });\r\n}, 16000);\r\n"]}