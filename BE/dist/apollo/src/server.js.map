{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../apollo/src/server.ts"],"names":[],"mappings":";;AAAA,qCAA8B;AAC9B,qCAA8B;AAC9B,iEAG+B;AAC/B,6CAAqC;AAErC,+BAAwB;AACxB,+BAAoC;AACpC,qCAA6C;AAC7C,2EAAgE;AAEhE,cAAc;AACd,iDAA0C;AAE1C,iBAAiB;AACjB,MAAM,MAAM,GAAG,iBAAO,EAAE,CAAC;AAEzB,yCAAyC;AAEzC,+CAA+C;AAC/C,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,cAAI,EAAE,CAAC,CAAC;AACxB,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,qBAAU,CAAC,IAAI,EAAE,EAAE,sCAAc,CAAC;IACvD,MAAM,EAAN,gBAAM;CACP,CAAC,CAAC,CAAC;AAEJ,4CAA4C;AAC5C,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,uCAAe,CAAC;IACtC,WAAW,EAAE,UAAU;IACvB,qBAAqB,EAAE,kBAAkB,gBAAM,CAAC,UAAU,gBAAgB;CAC3E,CAAC,CAAC,CAAC;AAEJ,mEAAmE;AACnE,MAAM,EAAE,GAAG,mBAAY,CAAC,MAAM,CAAC,CAAC;AAChC,EAAE,CAAC,MAAM,CAAC,gBAAM,CAAC,UAAU,EAAE,GAAG,EAAE;IAChC,OAAO,CAAC,GAAG,CAAC,oDAAoD,gBAAM,CAAC,UAAU,EAAE,CAAC,CAAC;IACrF,0DAA0D;IAC1D,IAAI,+CAAkB,CAAC;QACrB,OAAO,EAAP,iBAAO;QACP,SAAS,EAAT,mBAAS;QACT,MAAM,EAAN,gBAAM;KACP,EAAE;QACD,MAAM,EAAE,EAAE;QACV,IAAI,EAAE,gBAAgB;KACvB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import Config from './config';\r\nimport express from 'express';\r\nimport {\r\n  graphqlExpress,\r\n  graphiqlExpress,\r\n} from 'apollo-server-express';\r\nimport bodyParser from 'body-parser';\r\n\r\nimport cors from 'cors';\r\nimport { createServer } from 'http';\r\nimport { execute, subscribe } from 'graphql';\r\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\r\n\r\n// schema file\r\nimport schema from './redisModule/schema';\r\n\r\n// Express server\r\nconst server = express();\r\n\r\n// origin must be same as your client URI\r\n\r\n// endpoint for clients to interact with server\r\nserver.use('*', cors());\r\nserver.use('/graphql', bodyParser.json(), graphqlExpress({\r\n  schema\r\n}));\r\n\r\n// endpoint for browser client and test tool\r\nserver.use('/graphiql', graphiqlExpress({\r\n  endpointURL: '/graphql',\r\n  subscriptionsEndpoint: `ws://localhost:${Config.serverPort}/subscriptions`\r\n}));\r\n\r\n// IMPORTANT: wrap the Express server with new http client instance\r\nconst ws = createServer(server);\r\nws.listen(Config.serverPort, () => {\r\n  console.log(`Apollo Server is now running on http://localhost:${Config.serverPort}`);\r\n  // Set up the WebSocket for handling GraphQL subscriptions\r\n  new SubscriptionServer({\r\n    execute,\r\n    subscribe,\r\n    schema\r\n  }, {\r\n    server: ws,\r\n    path: '/subscriptions',\r\n  });\r\n});\r\n"]}