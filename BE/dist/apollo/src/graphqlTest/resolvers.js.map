{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../../../apollo/src/graphqlTest/resolvers.ts"],"names":[],"mappings":"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","sourcesContent":["import { PubSub } from 'graphql-subscriptions';\r\nimport { withFilter } from 'graphql-subscriptions';\r\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\r\n\r\nconst channels = [{\r\n  id: '1',\r\n  name: 'soccer',\r\n  messages: [{\r\n    id: '1',\r\n    text: 'soccer is football',\r\n  }, {\r\n    id: '2',\r\n    text: 'hello soccer world cup',\r\n  }]\r\n}, {\r\n  id: '2',\r\n  name: 'baseball',\r\n  messages: [{\r\n    id: '3',\r\n    text: 'baseball is life',\r\n  }, {\r\n    id: '4',\r\n    text: 'hello baseball world series',\r\n  }]\r\n}];\r\nlet nextId = 3;\r\nlet nextMessageId = 5;\r\nconst options = {\r\n  host: 'localhost',\r\n  port: 6379,\r\n  retry_strategy: options => {\r\n    // reconnect after\r\n    return Math.max(options.attempt * 100, 3000);\r\n  },\r\n  connectionListener: (err =>console.log(err))\r\n};\r\n\r\n// Instantiate Redis PubSub\r\nconst pubsub = new RedisPubSub({\r\n  connection: options\r\n});\r\n\r\nconst CHANNEL = `messageAdded`;\r\nconst CHANNEL1 = `messageAdded1`;\r\npubsub.subscribe(CHANNEL, (payload) => {\r\n  pubsub.publish(CHANNEL1, {payload})\r\n  console.log(payload)\r\n})\r\nconsole.log(\"here\")\r\n\r\n\r\n\r\n\r\nexport const resolvers = {\r\n  Query: {\r\n    channels: () => {\r\n      return channels;\r\n    },\r\n    channel: (root, { id }) => {\r\n      return channels.find(channel => channel.id === id);\r\n    },\r\n  },\r\n  Mutation: {\r\n    addChannel: (root, args) => {\r\n      const newChannel = { id: String(nextId++), messages: [], name: args.name };\r\n      channels.push(newChannel);\r\n      return newChannel;\r\n    },\r\n    addMessage: (root, { message }) => {\r\n      const channel = channels.find(channel => channel.id === message.channelId);\r\n      if(!channel)\r\n        throw new Error(\"Channel does not exist\");\r\n\r\n      const newMessage = { id: String(nextMessageId++), text: message.text };\r\n      channel.messages.push(newMessage);\r\n\r\n      pubsub.publish(CHANNEL, { messageAdded: newMessage, channelId: message.channelId });\r\n      // console.log(\"messazge publish\" + message.channelId)\r\n\r\n      return newMessage;\r\n    },\r\n  },\r\n  Subscription: {\r\n    messageAdded: {\r\n      subscribe: () => pubsub.asyncIterator(CHANNEL1)\r\n    },\r\n\r\n  },\r\n};\r\n\r\nconst test = pubsub.subscribe('messageAdded', (message)=> {console.log(message)})"]}