{"version":3,"file":"schames.js","sourceRoot":"","sources":["../../../../apollo/src/graphqlTest/schames.ts"],"names":[],"mappings":";;AAAA,iDAGuB;AAEvB,2CAAwC;AACxC,6CAA8B;AAE9B,MAAM,QAAQ,GAAG,qBAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BnB,CAAC;AAEF,MAAM,MAAM,GAAG,oCAAoB,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAT,qBAAS,EAAE,CAAC,CAAC;AACpD,wBAAM","sourcesContent":["import {\r\n  makeExecutableSchema,\r\n  addMockFunctionsToSchema,\r\n} from 'graphql-tools';\r\n\r\nimport { resolvers } from './resolvers';\r\nimport gql from 'graphql-tag';\r\n\r\nconst typeDefs = gql`\r\ntype Channel {\r\n  id: ID!                # \"!\" denotes a required field\r\n  name: String\r\n  messages: [Message]!\r\n}\r\ninput MessageInput{\r\n  channelId: ID!\r\n  text: String\r\n}\r\ntype Message {\r\n  id: ID!\r\n  text: String\r\n}\r\n# This type specifies the entry points into our API\r\ntype Query {\r\n  channels: [Channel]    # \"[]\" means this is a list of channels\r\n  channel(id: ID!): Channel\r\n}\r\n# The mutation root type, used to define all mutations\r\ntype Mutation {\r\n  addChannel(name: String!): Channel\r\n  addMessage(message: MessageInput!): Message\r\n}\r\n# The subscription root type, specifying what we can subscribe to\r\ntype Subscription {\r\n  messageAdded: String\r\n}\r\n`;\r\n\r\nconst schema = makeExecutableSchema({ typeDefs, resolvers });\r\nexport { schema };"]}