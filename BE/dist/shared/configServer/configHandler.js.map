{"version":3,"file":"configHandler.js","sourceRoot":"","sources":["../../../shared/configServer/configHandler.ts"],"names":[],"mappings":";;AACA,2BAA4C;AAG5C;IAGE,YAAa,IAAc,EAAE,aAAa,GAAG,SAAS;QACpD,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IACtC,CAAC;IAEO,SAAS,CAAC,IAAc,EAAE,aAAuB;QACvD,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC7D,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC;IAC7C,CAAC;IAEO,cAAc,CAAC,IAAc;QACnC,MAAM,YAAY,GAAG,iBAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAEO,cAAc,CAAC,aAAa;QAClC,MAAM,GAAG,GAAW,OAAO,CAAC,GAAG,CAAC;QAChC,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;aACX,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;aAC7C,OAAO,CAAC,GAAG,CAAC,EAAE;YACb,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QACP,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,mBAAmB,CAAC,eAAe,EAAE,SAAS;QACpD,0BAA0B,MAAM;YAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;iBACd,OAAO,CAAC,GAAG,CAAC,EAAE;gBACb,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,gBAAgB,CAAC,KAAK,CAAC,CAAC;iBACzB;qBACI;oBACH,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;iBACvC;YACH,CAAC,CAAC,CAAC;QACT,CAAC;QAED,gBAAgB,CAAC,eAAe,CAAC,CAAC;IACpC,CAAC;CAEF;AA/CD,sCA+CC","sourcesContent":["\nimport { PathLike, readFileSync } from 'fs';\n\n\nexport class ConfigHandler {\n  finalConfig: any;\n\n  constructor (path: PathLike, configInitial = 'config_') {\n    this.getConfig(path, configInitial);\n  }\n\n  private getConfig(path: PathLike, configInitial? : string): any {\n    const configFileObject = this.readConfigFile(path);\n    const configFromProcess = this.getFromProcess(configInitial);\n    this.compereObjectToFlat(configFileObject, configFromProcess);\n    return this.finalConfig = configFileObject;\n  }\n\n  private readConfigFile(path: PathLike): any {\n    const configString = readFileSync(path, 'utf8');\n    return JSON.parse(configString);\n  }\n\n  private getFromProcess(configInitial): Object {\n    const env: Object = process.env;\n    const envConfig = {};\n    Object.keys(env)\n        .filter(key => key.includes(configInitial, 0))\n        .forEach(key => {\n          envConfig[key] = env[key];\n        });\n    return envConfig;\n  }\n\n  private compereObjectToFlat(objectToIterate, toCompere): void {\n    function iterateRecursive(object) {\n      Object.keys(object)\n          .forEach(key => {\n            const value = object[key];\n            if (typeof value === 'object') {\n              iterateRecursive(value);\n            }\n            else {\n              object[key] = toCompere[key] || value;\n            }\n          });\n    }\n\n    iterateRecursive(objectToIterate);\n  }\n\n}\n\n\n\n"]}