{"version":3,"file":"sharedConection.js","sourceRoot":"","sources":["../../../shared/configServer/sharedConection.ts"],"names":[],"mappings":";;AAAA,0CAA0C;AAC1C,qCAA8B;AAC9B,+BAAwB;AACxB,mDAAgD;AAGnC,QAAA,SAAS,GAAG;IACvB,WAAW,EAAE,MAAM;IACnB,WAAW,EAAE,WAAW;CACzB,CAAC;AAGF;IAME;QACE,oCAAoC;QACpC,sCAAsC;QACtC,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,CAAC;IACzC,CAAC;IAGM,cAAc;QACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,GAAG,GAAG,iBAAO,EAAE,CAAC;YACrB,MAAM,IAAI,GAAG,iBAAS,CAAC,WAAW,CAAC;YACnC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,cAAI,EAAE,CAAC,CAAC;YACrB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;gBACzB,OAAO,OAAO,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iBAAiB,CAAC,IAAI;QACpB,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,YAAY;QACV,4CAA4C;QAC5C,sDAAsD;QACtD,qCAAqC;QACrC,qBAAqB;QACrB,MAAM;IACR,CAAC;CAEF;AAtCD,wCAsCC","sourcesContent":["import * as bodyParser from 'body-parser';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport { ConfigHandler } from './configHandler';\r\nimport { Application } from 'express-serve-static-core';\r\n\r\nexport const appConfig = {\r\n  config_Port: '5000',\r\n  config_Host: 'localhost'\r\n};\r\n\r\n\r\nexport class SharedServices {\r\n  // logService: LogHandler;\r\n  configHandler: ConfigHandler;\r\n  // testHandler: testHandler;\r\n  app: Application;\r\n\r\n  constructor() {\r\n    // this.logService = new LogHandler;\r\n    // this.testHandler = new testHandler;\r\n    this.configHandler = new ConfigHandler;\r\n  }\r\n\r\n\r\n  public initConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      this.app = express();\r\n      const port = appConfig.config_Port;\r\n      this.app.use(cors());\r\n      this.app.use(bodyParser.json());\r\n      this.app.use(bodyParser.urlencoded({ extended: true }));\r\n      this.app.listen(port, () => {\r\n        return resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  initConfigHandler(path) {\r\n    return this.configHandler.getConfig(path);\r\n  }\r\n\r\n  initHandlers() {\r\n    // return new Promise((resolve, reject) => {\r\n    //   this.configHandler = new ConfigHandler(this.app);\r\n    //   this.configHandler.fetchConfig()\r\n    //   return resolve()\r\n    // });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]}