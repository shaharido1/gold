{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../shared/redis/redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, Multi, RedisClient } from 'redis';\r\nimport { RedisConfig } from '../interfase/redisConfig';\r\nimport { redisDefaultConfig } from './redis.config.defalt';\r\nimport { RedisConnectionSetup, RedisListenEvents } from './model/redisListenEvents';\r\n\r\n\r\nexport class RedisAdapter {\r\n  public config: RedisConfig;\r\n  private multi: Multi;\r\n  public client: RedisClient;\r\n  statusWorking: boolean;\r\n\r\n  constructor(redisConfig: RedisConfig) {\r\n    this.config = redisConfig || redisDefaultConfig;\r\n  }\r\n\r\n  initClientConnection(): Promise<RedisClient> {\r\n    return new Promise((resolve, reject) => {\r\n      this.redisConnect().then();\r\n      this.client.on(RedisListenEvents.READY, () => {\r\n\r\n        this.multi = this.client.multi();\r\n        console.log('redis is ready');\r\n        return resolve(this.client);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  private redisConnect() {\r\n    return new Promise((resolve, reject) => {\r\n      this.client = createClient({\r\n        port: this.config.config_redisPort,\r\n        host: this.config.config_redisHost,\r\n        retry_strategy: (options) => {\r\n          // console.log(options);\r\n          if (options.error && options.error.code === RedisConnectionSetup.ECONNREFUSED) {\r\n            console.log('connection refused');\r\n          }\r\n          if (options.total_retry_time > Number(RedisConnectionSetup.TOTAL_RETRY_TIMES)) {\r\n            return new Error('Retry time exhausted');\r\n          }\r\n\r\n          return (Number(RedisConnectionSetup.RETRY_TIME));\r\n        }\r\n      });\r\n      this.createListeners();\r\n      resolve();\r\n    });\r\n\r\n  }\r\n\r\n  createListeners() {\r\n    this.client.on(RedisListenEvents.ERROR, (err) => {\r\n      console.error(err);\r\n    });\r\n    this.client.on(RedisListenEvents.RECONNECTING, () => {\r\n      console.log('Connection reestablished to redis');\r\n    });\r\n    this.client.on(RedisListenEvents.CONNECT, () => {\r\n      console.log('redis is connecting');\r\n    });\r\n  }\r\n\r\n\r\n  sendToQueue(list: Array<{ id: string }>, key) {\r\n    return new Promise((resolve, reject) => {\r\n      list.forEach(data => {\r\n        this.multi.hmset(`${key}:${data.id.toString()}`, RedisListenEvents.MESSAGE, JSON.stringify(data), (err, res) => {\r\n          if (err) {\r\n            console.error(err);\r\n          }\r\n        });\r\n      });\r\n      this.multi.exec((err, replies) => {\r\n        if (replies) {\r\n          return resolve(replies);\r\n        }\r\n        err ? console.log(err) : console.log('error with no error message');\r\n        return reject(err);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n}"]}