{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../shared/redis/redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, Multi, RedisClient } from 'redis';\r\nimport { RedisConfig } from '../interfase/redisConfig';\r\nimport { redisDefaultConfig } from './redis.config.defalt';\r\nimport { RedisListenEvents } from './model/redisListenEvents';\r\n\r\n\r\nexport class RedisAdapter {\r\n  public config: RedisConfig;\r\n  private multi: Multi;\r\n  public client: RedisClient;\r\n\r\n  constructor(redisConfig: RedisConfig) {\r\n    this.config = redisConfig || redisDefaultConfig;\r\n    // todo chane error listener\r\n    // this.setErrorListener();\r\n  }\r\n\r\n  initClientConnection(): Promise<RedisClient> {\r\n    return new Promise((resolve, reject) => {\r\n      const tryToConnect = setInterval(() => {\r\n        this.redisConnect()\r\n            .then(() => {\r\n              clearInterval(tryToConnect);\r\n              this.multi = this.client.multi();\r\n              console.log('redis Created');\r\n              return resolve(this.client);\r\n            })\r\n            .catch(err => err);\r\n      }, this.config.reconnect);\r\n    });\r\n  }\r\n\r\n  setErrorListener() {\r\n    this.client.on(RedisListenEvents.ERROR, (err) => {\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n\r\n  private redisConnect() {\r\n    return new Promise((resolve, reject) => {\r\n      this.client = createClient({\r\n        port: this.config.config_redisPort,\r\n        host: this.config.config_redisHost,\r\n        retry_strategy: (options) => {\r\n          if (options.error && options.error.code === 'ECONNREFUSED') {\r\n            // End reconnecting on a specific error and flush all commands with\r\n            // a individual error\r\n            return new Error('The server refused the connection');\r\n          }\r\n          if (options.total_retry_time > 1000 * 60 * 60) {\r\n            // End reconnecting after a specific timeout and flush all commands\r\n            // with a individual error\r\n            return new Error('Retry time exhausted');\r\n          }\r\n          if (options.attempt > 10) {\r\n            // End reconnecting with built in error\r\n            return undefined;\r\n          }\r\n          // reconnect after\r\n          return (3000);\r\n        }\r\n      });\r\n      this.client.on(RedisListenEvents.READY, () => {\r\n        return resolve();\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n\r\n  sendToQueue(list: Array<{ id: string }>, key) {\r\n    return new Promise((resolve, reject) => {\r\n      list.forEach(data => {\r\n        this.multi.hmset(`${key}:${data.id.toString()}`, RedisListenEvents.MESSAGE, JSON.stringify(data), (err, res) => {\r\n          if (err) {\r\n            console.error(err);\r\n          }\r\n        });\r\n      });\r\n      this.multi.exec((err, replies) => {\r\n        if (replies) {\r\n          return resolve(replies);\r\n        }\r\n        err ? console.log(err) : console.log('error with no error message');\r\n        return reject(err);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n}"]}