{"version":3,"file":"redisMQ.js","sourceRoot":"","sources":["../../../shared/redis/redisMQ.ts"],"names":[],"mappings":"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","sourcesContent":["import { RedisAdapter } from './redis';\nimport * as RSMQPromise from 'rsmq-promise';\nimport { RedisClient } from 'redis';\n\nexport class RedisMqAdapter extends RedisAdapter {\n\n  client: RedisClient;\n  rsmq: RSMQPromise;\n\n  // private unDeletedMsg: Array<string> = [];\n\n  initRMSQ(): Promise<RSMQPromise> {\n    return new Promise((resolve, reject) => {\n      console.log('initRMSQ');\n      this.initClientConnection()\n          .then(client => {\n            this.client = client;\n            this.rsmq = new RSMQPromise({ client });\n            this.assertQueue()\n                .then(() => {\n                  console.log('finished assert Q');\n                  console.log(this.config.config_redisQueueName);\n                  return resolve();\n                });\n          })\n          .catch(err => {\n            console.log(err);\n            return reject(err);\n          });\n    });\n  }\n\n\n  private assertQueue(qname?): Promise<void> {\n    qname ? this.config.config_redisQueueName = qname : this.config.config_redisQueueName;\n\n    return new Promise((reoslve, reject) => {\n      this.client.exists(`rsmq:${this.config.config_redisQueueName}:Q`, (err, res) => {\n        if (res >= 1) {\n          console.log(`Queue ${qname} already exist`);\n          return reoslve();\n        }\n        if (err) {\n          console.error(err);\n        }\n        else {\n          console.log(`creating Queue ${this.config.config_redisQueueName}`);\n          this.rsmq.createQueue({ qname: this.config.config_redisQueueName })\n              .then(() => {\n                console.log('Queue created!');\n                return reoslve();\n              })\n              .catch(err => {\n                if (err) {\n                  console.error(err);\n                  return reject();\n                }\n              });\n        }\n\n      });\n\n    });\n  }\n\n  public sendMassage(message, numberOfRounds, totalNumberOfRounds) {\n    message = JSON.stringify(message);\n    const timeToWightToRedis = new Date().getTime();\n    this.rsmq.sendMessage({\n      qname: this.config.config_redisQueueName,\n      message\n    }, (err, resp) => {\n      if (resp) {\n        if (numberOfRounds % totalNumberOfRounds == 0) {\n          console.log(`Time to write to redis: ${(new Date().getTime() - timeToWightToRedis) * 0.001} sec\\n`);\n        }\n      }\n      else if (err) {\n        console.log(err);\n      }\n      else {\n        console.log('error with no error message');\n      }\n    });\n  }\n\n  // reciveMessageNDo(workToDo: (message) => Promise<any>) {\n  //   this.rsmq.receiveMessage({ qname: this.qname }).then((message) => {\n  //     if (message && Object.keys(message).length) {\n  //       workToDo(message).then(message => {\n  //         this.rsmq.deleteMessage({ qname: this.qname, id: message.id }, (err, resp) => {\n  //           if (resp === 1) {\n  //             this.reciveMessageNDo(workToDo);\n  //           }\n  //           else {\n  //             this.unDeletedMsg.push(message.id);\n  //           }\n  //         });\n  //       });\n  //     }\n  //     else {\n  //       console.log('no message');\n  //       setTimeout(() => {\n  //         this.reciveMessageNDo(workToDo);\n  //       }, 200);\n  //     }\n  //   });\n  // }\n\n\n}"]}