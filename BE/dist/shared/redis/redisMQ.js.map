{"version":3,"file":"redisMQ.js","sourceRoot":"","sources":["../../../shared/redis/redisMQ.ts"],"names":[],"mappings":"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","sourcesContent":["import { RedisAdapter } from './redis';\nimport * as RSMQPromise from 'rsmq-promise';\nimport { RedisClient } from 'redis';\n\nexport class RedisMqAdapter extends RedisAdapter {\n\n  client: RedisClient;\n  rsmq: RSMQPromise;\n\n  // private unDeletedMsg: Array<string> = [];\n\n  initRMSQ(): Promise<RSMQPromise> {\n    return new Promise((resolve, reject) => {\n      console.log('initRMSQ');\n      this.initClientConnection()\n          .then(client => {\n            this.client = client;\n            this.rsmq = new RSMQPromise({ client });\n            this.assertQueue()\n                .then(() => {\n                  console.log('finished assert Q');\n                  console.log(this.config.config_redisQueueName);\n                  return resolve();\n                });\n          })\n          .catch(err => {\n            console.log(err);\n            return reject(err);\n          });\n    });\n  }\n\n\n  private assertQueue(qname?): Promise<void> {\n    if (qname !== undefined) {\n      this.config.config_redisQueueName = qname;\n    }\n\n    return new Promise((resolve, reject) => {\n      this.client.exists(`rsmq:${this.config.config_redisQueueName}:Q`, (err, res) => {\n        if (res >= 1) {\n          console.log(`Queue ${this.config.config_redisQueueName} already exist`);\n          return resolve();\n        }\n        if (err) {\n          console.error(err);\n        }\n        else {\n          this.rsmq.createQueue({ qname: this.config.config_redisQueueName })\n              .then(() => {\n                console.log(`Queue ${this.config.config_redisQueueName} created!`);\n                return resolve();\n              })\n              .catch(err => {\n                if (err) {\n                  console.error(err);\n                  return reject();\n                }\n              });\n        }\n\n      });\n\n    });\n  }\n\n  public sendMassage(message, qname = this.config.config_redisQueueName): Promise<any> {\n    console.log((qname));\n    return new Promise((resolve, reject) => {\n      this.rsmq.sendMessage({ qname, message: JSON.stringify(message) }, (err, res) => {\n        if (err) {\n          console.log(err);\n          return reject(err);\n        }\n        else if (res) {\n          return resolve(res);\n        }\n        else {\n          console.log('error with no error message');\n          return reject();\n        }\n      });\n    });\n  }\n\n\n}"]}