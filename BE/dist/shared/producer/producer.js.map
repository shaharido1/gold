{"version":3,"file":"producer.js","sourceRoot":"","sources":["../../../shared/producer/producer.ts"],"names":[],"mappings":";;AAGA,+EAAyF;AAGzF;IAKE,YAAY,YAAY,EAAE,iBAAiB;QACzC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,IAAI;QACT,OAAO;QACP,cAAc;QACd,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,qCAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,cAA8B,EAAE,EAAE;YACpG,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;YACrC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;IAGM,WAAW;QAChB,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;IACzC,CAAC;IAEM,eAAe,CAAC,GAAoB,EAAE,KAAa,EAAE,OAAwB;QAClF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE;oBAC1D,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;oBAC3B,UAAU,CAAC,WAAW,EAAE,CAAC;oBACzB,OAAO,MAAM,EAAE,CAAC;iBACjB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAGF;AAvCD,4BAuCC","sourcesContent":["import { RabbitProducer } from '../rabbit/rabbitProducer';\r\nimport { Options } from 'amqplib/properties';\r\nimport { Observable } from 'rxjs/index';\r\nimport { CreatesType, RabbitConnectionManager } from '../rabbit/rabbitConnectionManager';\r\n\r\n\r\nexport class Producer {\r\n  protected rabbitProducer: RabbitProducer;\r\n  private connectionManager: RabbitConnectionManager;\r\n  public listener: Observable<any>;\r\n\r\n  constructor(rabbitConfig, connectionManager) {\r\n    this.connectionManager = connectionManager;\r\n  }\r\n\r\n  public init() {\r\n    // enum\r\n    // only one...\r\n    console.log('init producer');\r\n    this.connectionManager.spawnQueueWorker(CreatesType.PRODUCER).then((rabbitProducer: RabbitProducer) => {\r\n      console.log('[producer]: new worker spawn producer');\r\n      this.rabbitProducer = rabbitProducer;\r\n      this.listener = this.rabbitProducer.channelsEvent();\r\n    });\r\n  }\r\n\r\n\r\n  public sendToQueue() {\r\n    return this.rabbitProducer.sendToQueue;\r\n  }\r\n\r\n  public generateToQueue(obs: Observable<any>, qname: string, options: Options.Consume) {\r\n    return new Promise((resolve, reject) => {\r\n      const subscriber = obs.subscribe(data => {\r\n        console.log('d?');\r\n        if (!this.rabbitProducer.sendToQueue(data, qname, options)) {\r\n          console.log('unsubscribe');\r\n          subscriber.unsubscribe();\r\n          return reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"]}