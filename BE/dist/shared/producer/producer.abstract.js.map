{"version":3,"file":"producer.abstract.js","sourceRoot":"","sources":["../../../shared/producer/producer.abstract.ts"],"names":[],"mappings":";;AAMA;IAIE,YAAY,YAAY,EAAE,iBAAiB;QACzC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,IAAI;QACT,OAAO;QACP,cAAc;QACd,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QAC5B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,cAA8B,EAAE,EAAE;gBACrF,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;gBAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;gBACrC,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;IACzC,CAAC;IAEM,eAAe,CAAC,GAAoB,EAAE,KAAa,EAAE,OAAwB;QAClF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBACjB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE;oBAC1D,UAAU,CAAC,WAAW,EAAE,CAAC;oBACzB,OAAO,MAAM,EAAE,CAAA;iBAChB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAGF;AAtCD,4BAsCC","sourcesContent":["import { RabbitProducer } from '../rabbit/rabbitProducer';\nimport { Options } from 'amqplib/properties';\nimport { Observable } from 'rxjs/index';\nimport { RabbitConnectionManager } from '../rabbit/rabbitConnectionManager';\n\n\nexport class Producer {\n  protected rabbitProducer: RabbitProducer;\n  private connectionManager: RabbitConnectionManager;\n\n  constructor(rabbitConfig, connectionManager) {\n    this.connectionManager = connectionManager;\n  }\n\n  public init(): Promise<void> {\n    // enum\n    // only one...\n    console.log(\"init producer\")\n    return new Promise((resolve, reject) => {\n      this.connectionManager.spawnQueueWorker(false).then((rabbitProducer: RabbitProducer) => {\n        console.log(\"new worker spwan\")\n        this.rabbitProducer = rabbitProducer;\n        resolve();\n      });\n    })\n  }\n\n  public sendToQueue() {\n    return this.rabbitProducer.sendToQueue;\n  }\n\n  public generateToQueue(obs: Observable<any>, qname: string, options: Options.Consume) {\n    return new Promise((resolve, reject) => {\n      const subscriber = obs.subscribe(data => {\n        console.log(\"d?\")\n        if (!this.rabbitProducer.sendToQueue(data, qname, options)) {\n          subscriber.unsubscribe();\n          return reject()\n        }\n      });\n    });\n  }\n\n\n}\n"]}