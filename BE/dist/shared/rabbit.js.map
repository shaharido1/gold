{"version":3,"file":"rabbit.js","sourceRoot":"","sources":["../../shared/rabbit.ts"],"names":[],"mappings":"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","sourcesContent":["import { Channel, Connection, connect } from 'amqplib/callback_api';\nimport { Replies } from 'amqplib/properties';\nimport { RabbitConfig } from './interfase/rabitConfig';\n\n\nexport class RabbitAdapter {\n\n  config: RabbitConfig;\n  private rabbitConnection: Connection;\n  private rabbitChannel: Channel;\n\n  constructor(rabbitConfig: RabbitConfig) {\n\n    this.config = rabbitConfig || {\n      config_rabbitHost: '10.0.75.1',\n      config_rabbitPort: '5672',\n      config_rabbitUser: 'guest',\n      config_rabbitPassword: 'guest',\n      config_rabbitQueueName: 'q',\n      config_persistent: true\n    };\n  }\n\n  private intervalConnection(): Promise<Connection> {\n    let i = 0;\n    return new Promise((resolve, reject) => {\n      const tryToConnect = setInterval(() => {\n        this.connect()\n            .then((connection) => {\n              clearInterval(tryToConnect);\n              return resolve(connection);\n            })\n            .catch(err => console.log(\"failed for the \" + i++ + \"time\"));\n      }, 10000);\n    });\n  }\n\n  initConnection(): Promise<{ ok: Replies.AssertQueue, channel: Channel }> {\n    return new Promise((resolve, reject) => {\n      this.intervalConnection().then(() => {\n        this.createChannel().then(() => {\n          console.log(this.config);\n          this.assertQueue(this.config.config_rabbitQueueName).then(ok => {\n            return resolve({ ok: ok, channel: this.rabbitChannel });\n          });\n        });\n      }).catch(() => reject('failed to connect'));\n    });\n  }\n\n\n  public sendToQueue(message, queue = this.config.config_rabbitQueueName) {\n    this.rabbitChannel.sendToQueue(queue, Buffer.from(message), { persistent: this.config.config_persistent });\n\n  }\n\n  private connect(): Promise<Connection> {\n    return new Promise((resolve, reject) => {\n      console.log('trying to connect to ' + `amqp://${this.config.config_rabbitUser}:${this.config.config_rabbitPassword}@${this.config.config_rabbitHost}:${this.config.config_rabbitPort}`);\n      connect(`amqp://${this.config.config_rabbitUser}:${this.config.config_rabbitPassword}@${this.config.config_rabbitHost}:${this.config.config_rabbitPort}`, (err, conn) => {\n        if (conn) {\n          console.log('connected to rabbit!');\n          this.rabbitConnection = conn;\n          return resolve(conn);\n        }\n        else if (err) {\n          console.log('fail to connect');\n          console.log(err);\n          return reject();\n        }\n      });\n    });\n  }\n\n  private createChannel(connection?): Promise<Channel> {\n    return new Promise((resolve, reject) => {\n      const conn = connection || this.rabbitConnection;\n      conn.createChannel((err, channel) => {\n        if (channel) {\n          this.rabbitChannel = channel;\n          return resolve(channel);\n        }\n        else if (err) {\n          console.log('fail to connect');\n          console.log(err);\n          return reject();\n        }\n      });\n    });\n  }\n\n\n  public assertQueue(queue, options?): Promise<Replies.AssertQueue> {\n    return new Promise((resolve, reject) => {\n      this.rabbitChannel.assertQueue(queue, options, (err, ok) => {\n        if (ok) {\n          return resolve(ok);\n        }\n        else if (err) {\n          console.log(err);\n          return reject();\n        }\n      });\n    });\n\n  }\n\n\n}"]}