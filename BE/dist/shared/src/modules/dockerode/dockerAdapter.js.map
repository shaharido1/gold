{"version":3,"file":"dockerAdapter.js","sourceRoot":"","sources":["../../../../../shared/src/modules/dockerode/dockerAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Dockerode from 'dockerode';\nimport { Container } from 'dockerode';\n\n\nconst docker = new Dockerode();\n\nconst ErrorMessage = {\n  noSuchContainer: 'no such container'\n};\n\nexport class DockerAdapter {\n\n  name: string;\n  containers: Array<Container> = [];\n  defaultContainer;\n\n  getListContainers() : any  {\n    return new Promise((resolve, reject) => {\n      docker.listContainers()\n          .then((containers) => {\n            resolve(containers);\n          })\n          .catch((err) => {\n            console.log(err);\n            reject(err);\n          });\n    });\n  }\n\n  checkImageExist(image: string, tag?: string) {\n    return new Promise((resolve, reject) => {\n      // console.log(`check if the Image Exists`);\n      docker.pull(`${image}`, {})\n          .then(() => {\n            console.log(`${image} created `);\n            reject();\n          })\n          .catch((err) => {\n                console.log(`cant pull image ${image}`);\n                reject(err);\n              }\n          );\n      // docker.listImages()\n      //     .then(\n      //         (images) => {\n      //           images.forEach(x => {\n      //             console.log(`Check images`);\n      //             if (image !== x.RepoTags[0]) {\n      //\n      //             }\n      //           });\n      //         }\n      //     )\n      //     .catch((err) => {\n      //       console.log('cant  list images');\n      //       console.log(err);\n      //     });\n    });\n  }\n\n  startContainer(imageName: string) {\n    this.name = imageName + '-1';\n    return new Promise((resolve, reject) => {\n      this.ifExistDestroy().then(() => {\n        docker.createContainer({\n          Image: imageName,\n          Tty: false,\n          name: this.name,\n          HostConfig: { PortBindings: { '6379/tcp': [{ 'HostPort': '6379' }] } }\n        })\n            .then((container) => {\n              container.start()\n                  .then(() => {\n                    console.log('id: ' + container.id);\n                    this.containers.push(container);\n                    resolve(this.defaultContainer = container);\n                  });\n            })\n            .catch(err => {\n              console.log('cant create');\n              console.error(err);\n              reject();\n            });\n      });\n    });\n  }\n\n  ifExistDestroy(dockerName = this.name) {\n    return new Promise((resolve, reject) => {\n      const container = docker.getContainer(dockerName);\n      container.remove({ force: true }).then(() => {\n        resolve();\n      }).catch((e) => {\n        if (e.reason === ErrorMessage.noSuchContainer) {\n          resolve();\n        }\n        else {\n          console.log('can\\'t kill');\n          console.log(e);\n          reject();\n        }\n      });\n    });\n  }\n\n  getContainerById(continerId = this.defaultContainer.id) {\n    return docker.getContainer(continerId);\n  }\n\n  killContainer(container = this.defaultContainer) {\n    return container.kill();\n  }\n\n  stopContaioner(container = this.defaultContainer) {\n    return container.stop();\n  }\n}\n"]}