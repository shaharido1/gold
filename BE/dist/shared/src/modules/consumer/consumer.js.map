{"version":3,"file":"consumer.js","sourceRoot":"","sources":["../../../../../shared/src/modules/consumer/consumer.ts"],"names":[],"mappings":";;AAKA,+EAAyF;AAIzF;IAQE,YAAY,YAAY,EAAE,iBAAiB;QALnC,kBAAa,GAAwB,EAAE,CAAC;QAM9C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,2EAA2E;IAC7E,CAAC;IAED,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,qCAAW,CAAC,QAAQ,CAAC;iBACxD,IAAI,CAAC,CAAC,cAA8B,EAAE,EAAE;gBACvC,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;gBACrD,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;gBACtC,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IAEL,CAAC;IAKD,YAAY,CAAC,gBAAgB,GAAG,EAAE;QAChC,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,gBAAgB,EAAE;YAC3B,qFAAqF;YACrF,CAAC,EAAE,CAAC;SACL;IACH,CAAC;IAGD,gBAAgB,CAAC,eAAuC,EAAE,KAAM,EAAE,OAAyB;QACzF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAErC,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;iBAClE,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClB,eAAe,CAAC,IAAI,CAAC;qBAChB,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qBAC1B,KAAK,CAAC,GAAG,CAAC,EAAE;oBACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,EAAE;wBACzC,YAAY,CAAC,WAAW,EAAE,CAAC;wBAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;wBAClB,OAAO,MAAM,EAAE,CAAC;qBACjB;gBACH,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,CAAC;YACP,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CAAC,GAAY;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,GAAY;QACjB,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED,OAAO;QACL,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;IACzE,CAAC;CACF;AAtED,4BAsEC","sourcesContent":["import { RabbitConsumer } from '../rabbit/rabbitConsumer';\nimport { Options } from 'amqplib/properties';\nimport { Connection, Message } from 'amqplib';\nimport { Subscription } from 'rxjs/index';\nimport { RabbitConfig } from '../../interface/rabitConfig';\nimport { CreatesType, RabbitConnectionManager } from '../rabbit/rabbitConnectionManager';\nimport { RabbitProducer } from '../rabbit/rabbitProducer';\n\n\nexport class Consumer {\n\n  protected rabbitConsumers: RabbitConsumer;\n  private subscriptions: Array<Subscription> = [];\n  private connectionManager: RabbitConnectionManager;\n  private rabbitConfig: RabbitConfig;\n\n\n  constructor(rabbitConfig, connectionManager) {\n    this.rabbitConfig = rabbitConfig;\n    this.connectionManager = connectionManager;\n    // this.rabbitConsumers.push(new RabbitConsumer(rabbitConfig, connection));\n  }\n\n  init(): Promise<void> {\n    console.log('init consumer');\n    return new Promise((resolve, reject) => {\n      this.connectionManager.spawnQueueWorker(CreatesType.CONSUMER)\n          .then((rabbitConsumer: RabbitConsumer) => {\n            console.log('[consumer]: new worker spawn consumer');\n            this.rabbitConsumers = rabbitConsumer;\n            resolve();\n          });\n    });\n\n  }\n\n\n\n\n  initChannels(numberOfChannels = 10) {\n    let i = 0;\n    while (i < numberOfChannels) {\n      // this.rabbitConsumers.push(new RabbitConsumer(this.rabbitConfig, this.connection));\n      i++;\n    }\n  }\n\n\n  consumeFromQueue(promiseFunction: (data) => Promise<any>, queue?, options?: Options.Consume) {\n    return new Promise((resolve, reject) => {\n\n      const subscription = this.rabbitConsumers.clientConsume(queue, options)\n          .subscribe((data) => {\n            promiseFunction(data)\n                .then(() => this.ack(data))\n                .catch(err => {\n                  console.log(err);\n                  if (!this.rabbitConsumers.clientConsume()) {\n                    subscription.unsubscribe();\n                    this.cancel(data);\n                    return reject();\n                  }\n                });\n          });\n      this.subscriptions.push(subscription);\n    });\n  }\n\n  ack(msg: Message) {\n    return this.rabbitConsumers.ack(msg);\n  }\n\n  cancel(msg: Message) {\n    return this.rabbitConsumers.cancel(msg);\n  }\n\n  destory() {\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n}\n"]}