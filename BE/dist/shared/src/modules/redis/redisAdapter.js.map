{"version":3,"file":"redisAdapter.js","sourceRoot":"","sources":["../../../../../shared/src/modules/redis/redisAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, Multi, RedisClient } from 'redis';\nimport { RedisConfig } from '../../interface/redisConfig';\nimport { redisDefaultConfig } from './redis.config.defalt';\nimport { RedisConnectionSetup, RedisListenEvents } from './model/redisListenEvents';\n\nexport class RedisAdapter {\n  public config: RedisConfig;\n  private multi: Multi;\n  public client: RedisClient;\n  statusWorking: boolean;\n\n  constructor(redisConfig: RedisConfig = redisDefaultConfig) {\n    this.config = redisConfig;\n  }\n\n  initClientConnection(): Promise<RedisClient> {\n    return new Promise((resolve, reject) => {\n      this.redisConnect();\n      this.client.on(RedisListenEvents.READY, () => {\n        this.multi = this.client.multi();\n        console.log('redis is ready');\n        return resolve(this.client);\n      });\n    });\n  }\n\n  private redisConnect() {\n    this.client = createClient({\n      port: this.config.config_redisPort,\n      host: this.config.config_redisHost,\n      retry_strategy: (options) => {\n        // console.log(options);\n        if (options.error && options.error.code === RedisConnectionSetup.ECONNREFUSED) {\n          console.log('connection refused');\n        }\n        if (options.total_retry_time > Number(RedisConnectionSetup.TOTAL_RETRY_TIMES)) {\n          return new Error('Retry time exhausted');\n        }\n\n        return (Number(RedisConnectionSetup.RETRY_TIME));\n      }\n    });\n    this.createListeners();\n  }\n\n  private createListeners() {\n    this.client.on(RedisListenEvents.ERROR, (err) => {\n      console.error(err);\n    });\n    this.client.on(RedisListenEvents.RECONNECTING, () => {\n      console.log('Connection reestablished to redis');\n    });\n    this.client.on(RedisListenEvents.CONNECT, () => {\n      console.log('redis is connecting');\n    });\n  }\n\n  // set multiple hash fields to multiple values\n  public setMultiFieldsToMultival(redisKey: string, args: Array<string>) {\n    return new Promise((resolve, reject) => {\n      this.multi.hmset(redisKey, args, (err, res) =>\n          this.resolveCb(err, res, resolve, reject)\n      );\n    });\n  }\n\n  // add one or more members to a sorted set, or update its score if it already exists.\n  public pushToSortedSet(redisKey: string, args: Array<string>) {\n    return new Promise((resolve) => {\n      this.multi.zadd(redisKey, args, (err, res) => {\n        return resolve(res);\n      });\n    });\n  }\n\n  // Return a range of members in a sorted set, by score, with scores ordered from high to low.\n  getRangeSetByScoreHighToLow(redisKey: string,\n                              min: number | string = '+inf',\n                              max: number | string = '-inf',\n                              withscores?: string,\n                              limit?: string,\n                              offset?: number,\n                              count?: number,\n                              passToResolve?) {\n    return new Promise((resolve, reject) => {\n      this.multi.ZREVRANGEBYSCORE(redisKey, min, max, withscores, limit, offset, count, (err, res) => {\n        return this.resolveCb(err, res, resolve, reject, passToResolve);\n      });\n    });\n  }\n\n  // get all fields and values in a hash\n  getAllFieldsAndValues(redisKey: string, passToResolve?) {\n    return new Promise((resolve, reject) => {\n      this.multi.HGETALL(redisKey, (err, res) => {\n        return this.resolveCb(err, res, resolve, reject, passToResolve);\n      });\n    });\n  }\n\n  // get the value of a hash mainFields\n  getValue(redisKey: string, subField: string[], passToResolve?) {\n    return new Promise((resolve, reject) => {\n      this.multi.HMGET(redisKey, subField, (err, res) => {\n        return this.resolveCb(err, res, resolve, reject, passToResolve);\n      });\n    });\n  }\n\n  // get all fields in hash\n  getAllFieldsHash(redisKey: string, passToResolve?) {\n    return new Promise((resolve, reject) => {\n      this.multi.hkeys(redisKey, (err, res) => {\n        return this.resolveCb(err, res, resolve, reject, passToResolve);\n      });\n    });\n  }\n\n  ttl() {\n    // this.multi.EXPIRE()\n  }\n\n  execData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.multi.exec((err, res) => this.resolveCb(err, res, resolve, reject));\n    });\n  }\n\n  private resolveCb(err, response, resolve, reject, argsToResolve?: any) {\n    if (response) {\n      const toResolve = argsToResolve ? { argsToResolve, response } : response;\n      // console.log(toResolve)\n      return resolve(toResolve);\n    }\n    else if (err) {\n      console.log('err resolveCB');\n      console.log(err);\n      return reject(err);\n    }\n    else {\n      console.log('error with no error message');\n\n      return reject('error with no error message');\n    }\n  }\n\n}"]}