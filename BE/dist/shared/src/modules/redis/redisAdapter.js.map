{"version":3,"file":"redisAdapter.js","sourceRoot":"","sources":["../../../../../shared/src/modules/redis/redisAdapter.ts"],"names":[],"mappings":";;AAAA,iCAAmE;AAEnE,+DAA2D;AAC3D,iEAAoF;AAGpF;IAME,YAAY,cAA2B,wCAAkB;QACvD,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;IAC5B,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,qCAAiB,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC3C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACjC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,MAAM,GAAG,oBAAY,CAAC;YACzB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB;YAClC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB;YAClC,cAAc,EAAE,CAAC,OAAO,EAAE,EAAE;gBAC1B,wBAAwB;gBACxB,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,wCAAoB,CAAC,YAAY,EAAE;oBAC7E,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;iBACnC;gBACD,IAAI,OAAO,CAAC,gBAAgB,GAAG,MAAM,CAAC,wCAAoB,CAAC,iBAAiB,CAAC,EAAE;oBAC7E,OAAO,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;iBAC1C;gBAED,OAAO,CAAC,MAAM,CAAC,wCAAoB,CAAC,UAAU,CAAC,CAAC,CAAC;YACnD,CAAC;SACF,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,qCAAiB,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;YAC9C,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,qCAAiB,CAAC,YAAY,EAAE,GAAG,EAAE;YAClD,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,qCAAiB,CAAC,OAAO,EAAE,GAAG,EAAE;YAC7C,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8CAA8C;IAC9C,wBAAwB,CAAC,QAAgB,EAAE,IAAI;QAC7C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,IAAI,EAC9B,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACX,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,sCAAsC;IACtC,qBAAqB,CAAC,QAAgB;QACpC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAChD,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAoC;IACpC,QAAQ,CAAC,QAAgB,EAAE,QAAgB;QACzC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACtD,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,yBAAyB;IACzB,YAAY,CAAC,GAAW;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAkB,EAAE,EAAE;gBACvD,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEL,CAAC;IAGD,QAAQ;QACN,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM;QACzC,IAAI,GAAG,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;SACrB;aACI,IAAI,GAAG,EAAE;YACZ,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;SACpB;aACI;YACH,OAAO,MAAM,CAAC,6BAA6B,CAAC,CAAC;SAC9C;IACH,CAAC;CAEF;AAhHD,oCAgHC","sourcesContent":["import { Callback, createClient, Multi, RedisClient } from 'redis';\nimport { RedisConfig } from '../../interface/redisConfig';\nimport { redisDefaultConfig } from './redis.config.defalt';\nimport { RedisConnectionSetup, RedisListenEvents } from './model/redisListenEvents';\nimport { RedisEntity, RedisInterceptionQuery, RedisQueryCore, RedisQueryMissionRelated } from './model/dbInterface';\n\nexport class RedisAdapter {\n  public config: RedisConfig;\n  private multi: Multi;\n  public client: RedisClient;\n  statusWorking: boolean;\n\n  constructor(redisConfig: RedisConfig = redisDefaultConfig) {\n    this.config = redisConfig;\n  }\n\n  initClientConnection(): Promise<RedisClient> {\n    return new Promise((resolve, reject) => {\n      this.redisConnect();\n      this.client.on(RedisListenEvents.READY, () => {\n        this.multi = this.client.multi();\n        console.log('redis is ready');\n        return resolve(this.client);\n      });\n    });\n  }\n\n  private redisConnect() {\n    this.client = createClient({\n      port: this.config.config_redisPort,\n      host: this.config.config_redisHost,\n      retry_strategy: (options) => {\n        // console.log(options);\n        if (options.error && options.error.code === RedisConnectionSetup.ECONNREFUSED) {\n          console.log('connection refused');\n        }\n        if (options.total_retry_time > Number(RedisConnectionSetup.TOTAL_RETRY_TIMES)) {\n          return new Error('Retry time exhausted');\n        }\n\n        return (Number(RedisConnectionSetup.RETRY_TIME));\n      }\n    });\n    this.createListeners();\n  }\n\n  createListeners() {\n    this.client.on(RedisListenEvents.ERROR, (err) => {\n      console.error(err);\n    });\n    this.client.on(RedisListenEvents.RECONNECTING, () => {\n      console.log('Connection reestablished to redis');\n    });\n    this.client.on(RedisListenEvents.CONNECT, () => {\n      console.log('redis is connecting');\n    });\n  }\n\n  // set multiple hash fields to multiple values\n  setMultiFieldsToMultival(redisKey: string, args) {\n    return new Promise((resolve, reject) => {\n      this.multi.hmset(redisKey, ...args,\n          (err, res) => {\n            this.resolveCb(err, res, resolve, reject);\n          });\n    });\n  }\n\n\n  // get all fields and values in a hash\n  getAllFieldsAndValues(redisKey: string) {\n    return new Promise((resolve, reject) => {\n      return this.client.HGETALL(redisKey, (err, res) => {\n        this.resolveCb(err, res, resolve, reject);\n      });\n    });\n  }\n\n  // get the value of a hash mainField\n  getValue(redisKey: string, subField: string) {\n    return new Promise((resolve, reject) => {\n      return this.multi.HGET(redisKey, subField, (err, res) => {\n        this.resolveCb(err, res, resolve, reject);\n      });\n    });\n\n  }\n\n  // get all fields in hash\n  getAllFields(key: string) {\n    return new Promise((resolve, reject) => {\n      return this.multi.HKEYS(key, (err, res: Array<string>) => {\n        this.resolveCb(err, res, resolve, reject);\n      });\n    });\n\n  }\n\n\n  execData() {\n    return new Promise((resolve, reject) => {\n      this.multi.exec((err, res) => this.resolveCb(err, res, resolve, reject));\n    });\n  }\n\n  private resolveCb(err, res, resolve, reject) {\n    if (res) {\n      console.log(res);\n      return resolve(res);\n    }\n    else if (err) {\n      return reject(err);\n    }\n    else {\n      return reject('error with no error message');\n    }\n  }\n\n}"]}