{"version":3,"file":"goldDbService.js","sourceRoot":"","sources":["../../../../../shared/src/modules/redis/goldDbService.ts"],"names":[],"mappings":"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","sourcesContent":["import { RedisAdapter } from './redisAdapter';\nimport { RedisConfig } from '../../interface/redisConfig';\nimport {\n  RedisDataType,\n  RedisInput,\n  RedisInterceptionCoreFields,\n  RedisQueryGetInterception,\n  RedisQueryGetMission,\n  RedisQuerySet\n} from './entity/redisQuer';\n\nexport enum RedisGetTypes {\n  set = 'set',\n  hashMap = 'hashMap'\n}\n\nexport enum RedisAnswerTypes {\n  object = 'object',\n  missionId = 'missionId',\n  entityId = 'entityId'\n}\n\nexport enum GetRangeSorted {\n  withscores = 'withscores',\n  limit = 'limit',\n  zero = 0,\n  one = 1\n\n}\n\nexport type SomeFields = Map<string, { entityId: string, mainField: string, subFields: Array<string>, missionId?: string }>;\nexport type SetFields = Map<string, { entityId: string, mainField: string }>;\nexport class GoldDbService {\n\n  public redis: RedisAdapter;\n  public config: RedisConfig;\n  mapSetFields: SetFields;\n  mapSomeFields: SomeFields;\n\n  constructor() {\n    this.redis = new RedisAdapter();\n    this.config = this.redis.config;\n    this.mapSetFields = new Map();\n    this.mapSomeFields = new Map();\n  }\n\n  connectToDataBase() {\n    return new Promise((resolve, reject) => {\n\n      this.redis.initClientConnection()\n          .then(() => {\n                resolve('redis is ready');\n              }\n          )\n          .catch((err) => {\n                console.log(err);\n                reject(err);\n              }\n          );\n    });\n  }\n\n  writeBatchToRedis(batch: Array<RedisQuerySet>): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        batch.forEach((entity) => {\n          this.writeEntityToRedis(entity);\n        });\n        this.redis.execData()\n            .then((res) => {\n              resolve(res);\n            })\n            .catch((err) => reject(err));\n      }\n      catch (e) {\n        console.log(e);\n        return reject(e);\n      }\n    });\n  }\n\n  private writeEntityToRedis({ type, entityId, mainFieldId, entFields }: RedisQuerySet) {\n    const arr = GoldDbService.redisInputIntoArrayString(entFields);\n    const redisKey = `${type}_${entityId}_${mainFieldId}`;\n    switch (mainFieldId) {\n      case RedisInterceptionCoreFields.byTime:\n      case RedisInterceptionCoreFields.byRank:\n      case RedisInterceptionCoreFields.dynamic: {\n        this.redis.pushToSortedSet(redisKey, arr);\n        break;\n      }\n      case RedisInterceptionCoreFields.static:\n      case RedisInterceptionCoreFields.related_missions:\n      case RedisInterceptionCoreFields.rank:\n      case RedisInterceptionCoreFields.tags:\n\n        this.redis.setMultiFieldsToMultival(redisKey, arr);\n        break;\n    }\n  }\n\n\n  private static redisInputIntoArrayString(redisInput: Array<RedisInput>) {\n    const redisInputArray = [];\n    redisInput.forEach(input => {\n      redisInputArray.push(input.subField, input.value);\n    });\n    return redisInputArray;\n  }\n\n  private static fromRedisArrayToObject(str): Array<{ key: string, score: number }> {\n    const objectOut = [];\n    for (let x = 0; x < str.length; x += 2) {\n      const tmp = {\n        key: str[x],\n        score: Math.round(str[x + 1] * 10) / 10\n      };\n      objectOut.push(tmp);\n    }\n    return objectOut;\n  }\n\n\n  private redisKeyBuilder(obj): any {\n    Object.keys(obj).forEach(key => {\n      const redisKey = obj.type + '_' + obj.entityId + '_' + key;\n      switch (key) {\n        case RedisInterceptionCoreFields.dynamic:\n          this.mapSetFields.set(redisKey, {\n            entityId: obj.entityId,\n            mainField: key\n          });\n          break;\n        case RedisInterceptionCoreFields.static:\n          const stringFields = [];\n          Object.keys(obj[key])\n              .forEach(sub => {\n                if (obj[key][sub] === true) {\n                  stringFields.push(sub);\n                }\n              });\n          this.mapSomeFields.set(redisKey, {\n            entityId: obj.entityId,\n            mainField: key,\n            subFields: stringFields\n          });\n          break;\n        case RedisInterceptionCoreFields.related_missions:\n        case RedisInterceptionCoreFields.rank:\n        case RedisInterceptionCoreFields.tags:\n          this.mapSomeFields.set(redisKey, {\n            entityId: obj.entityId,\n            mainField: key,\n            subFields: obj.missionId,\n            missionId: obj.missionId\n          });\n          break;\n      }\n    });\n  }\n\n\n  getAllEntityData(query: RedisQueryGetInterception): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.redisKeyBuilder(query);\n      const promises = [];\n      promises.push(this.getAllEntitiesSubFields());\n      // promises.push(this.getTopRateFieldOfSet(this.mapSetFields));\n      this.redis.execData()\n          .then(() => {\n            Promise.all(promises).then((response) => {\n              console.log(response);\n              // const missionAnswer = this.creatObjectOfEntity(response);\n              // this.mapSomeFields = new Map();\n              // this.mapSetFields = new Map();\n              // resolve(missionAnswer);\n              resolve();\n            });\n          })\n          .catch((err) => {\n            console.log(err);\n            reject(err);\n          });\n    });\n  }\n\n  getAllEntitiesSubFields(someFields : SomeFields = this.mapSomeFields) {\n    const promises = [];\n    someFields.forEach(({subFields}, redisKey) => {\n      promises.push(this.redis.getValue(redisKey, subFields, {\n        redisKey,\n        type: RedisGetTypes.hashMap\n      }));\n    });\n    return promises;\n  }\n\n  getTopRateFieldOfSet(setFields : SetFields = this.mapSetFields) {\n    const promises = [];\n    setFields.forEach((value, redisKey) => {\n      promises.push(this.redis.getRangeSetByScoreHighToLow(redisKey, '+inf', '-inf', GetRangeSorted.withscores,\n          GetRangeSorted.limit, GetRangeSorted.zero, GetRangeSorted.one, {\n            type: RedisGetTypes.set,\n            redisKey\n          }));\n    });\n    return promises;\n  }\n\n  creatObjectOfEntity(arr : Array<Array<{argsToResolve : {redisKey: string, type: RedisGetTypes}, response: string}>>) {\n    const newMissionAnswer = {};\n    arr.forEach((wrapper) => {\n      wrapper.forEach((answer) => {\n        if (answer.argsToResolve && answer.argsToResolve.type === RedisGetTypes.hashMap) {\n          const val = this.mapSomeFields.get(answer.argsToResolve.redisKey);\n          const st = {};\n          if (typeof val.subFields === RedisAnswerTypes.object) {\n            val.subFields.forEach((f, i) => {\n              st[f] = answer.response[i];\n            });\n            newMissionAnswer[val.mainField] = st;\n          }\n          else {\n            newMissionAnswer[val.mainField] = answer.response;\n            newMissionAnswer[RedisAnswerTypes.missionId] = val.missionId;\n          }\n          newMissionAnswer[RedisAnswerTypes.entityId] = val.entityId;\n\n        }\n        else if (answer.argsToResolve && answer.argsToResolve.type === RedisGetTypes.set) {\n          const val = this.mapSetFields.get(answer.argsToResolve.redisKey);\n          newMissionAnswer[val.mainField] = GoldDbService.fromRedisArrayToObject(answer.response);\n        }\n      });\n\n    });\n    // console.log(newMissionAnswer);\n    return newMissionAnswer;\n  }\n\n  createQuery(entityId, missionId, options?) {\n    // todo options\n    const entityQuery = {\n      type: RedisDataType.interception,\n      entityId: entityId.key.split('_').pop(),\n      missionId: `M_${missionId}`,\n      static: {\n        name: true,\n        surName: true,\n        address: true\n      },\n      dynamic: true,\n      rank: true,\n      tags: true\n    };\n    return entityQuery;\n  }\n\n\n  public getFieldsOfMission({ type, missionId, mainFieldId }: RedisQueryGetMission, max, min) {\n    return new Promise((resolve, reject) => {\n      this.getMission({ type, missionId, mainFieldId }, max, min)\n          .then((entityIds : Array<string>) => {\n            this.mapSomeFields = new Map();\n            this.mapSetFields = new Map();\n            entityIds.forEach((entityId) => {\n              const query = this.createQuery(entityId, missionId);\n              console.log(query);\n              console.log('\\n');\n              this.getAllEntityData(query);\n              // .then((entityDetails) => {\n              //   console.log(entityDetails);\n              // resolve(entityDetails);\n              // });\n            });\n\n          }).catch(err => console.log(err));\n    });\n  }\n\n\n  public getMission({ type, missionId, mainFieldId }: RedisQueryGetMission, max, min) {\n    return new Promise((resolve, reject) => {\n      const redisKey = `${type}_${missionId}_${mainFieldId}`;\n      this.redis.getRangeSetByScoreHighToLow(redisKey,\n          '+inf',\n          '-inf',\n          GetRangeSorted.withscores,\n          GetRangeSorted.limit, min, max)\n          .then((res: any) => {\n            const mission = GoldDbService.fromRedisArrayToObject(res);\n            resolve(mission);\n          });\n      this.redis.execData()\n          .catch((err) => {\n            console.log(err);\n            reject(err);\n          });\n    });\n  }\n\n\n  public getTopInRangeOfScore({ type, missionId, mainFieldId }: RedisQueryGetMission, max: number, min: number) {\n    return new Promise((resolve, reject) => {\n      const redisKey = `${type}_${missionId}_${mainFieldId}`;\n      console.log(redisKey);\n      const prom = this.redis.getRangeSetByScoreHighToLow(redisKey, '+inf', '-inf', GetRangeSorted.withscores,\n          GetRangeSorted.limit, max, min);\n      this.redis.execData()\n          .then(() => {\n            prom.then((res) => {\n              const stretcheredObject = GoldDbService.fromRedisArrayToObject(res);\n              resolve(stretcheredObject);\n            });\n          })\n          .catch((err) => {\n            console.log(err);\n            reject(err);\n          });\n    });\n  }\n\n}\n\n\n"]}