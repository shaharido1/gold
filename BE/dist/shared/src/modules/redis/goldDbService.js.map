{"version":3,"file":"goldDbService.js","sourceRoot":"","sources":["../../../../../shared/src/modules/redis/goldDbService.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RedisEntity,\n  RedisInput,\n  RedisInterceptionQuery,\n  RedisQueryCore,\n  RedisQueryMissionRelated\n} from './model/dbInterface';\nimport { RedisAdapter } from './redisAdapter';\nimport { RedisConfig } from '../../interface/redisConfig';\n\nexport class GoldDbService {\n\n  public redis: RedisAdapter;\n  public config: RedisConfig;\n\n  constructor() {\n    this.redis = new RedisAdapter();\n    this.config = this.redis.config;\n  }\n\n  connectToDataBase() {\n    return new Promise((resolve, reject) => {\n\n      this.redis.initClientConnection()\n          .then(() => {\n                resolve('redis is ready');\n              }\n          )\n          .catch((err) => {\n                console.log(err);\n                reject(err);\n              }\n          );\n    });\n  }\n\n  writeBatchToRedis(batch: Array<RedisEntity>): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        batch.forEach(entity => this.writeEntityToRedis(entity)\n            .catch(err => {\n              console.log('err');\n            }));\n        this.redis.execData()\n            .then((res) => resolve(res))\n            .catch(() => reject());\n      }\n      catch (e) {\n        console.log(e);\n        return reject(e);\n      }\n    });\n  }\n\n  private writeEntityToRedis({ type, entityId, mainField, redisInput}: RedisEntity): Promise<any> {\n      const redisKey = mainField ? `${type}_${entityId}_${mainField}` : `${type}_${entityId}`;\n      return this.redis.setMultiFieldsToMultival(redisKey, GoldDbService.redisInputIntoArrayString(redisInput))\n  }\n\n\n  private static redisInputIntoArrayString(redisInput : Array<RedisInput>) {\n    const redisInputArray = [];\n    redisInput.forEach(input => {\n      redisInputArray.push(input.subField, input.value)\n    });\n    return redisInputArray\n  }\n\n  getAllEntityData(redisInterceptionQuery: RedisInterceptionQuery) {\n    // this.getAllEntityFields(redisInterceptionQuery);\n    // this.getAllEntitySubfields(redisInterceptionQuery);\n  }\n\n  getAllEntityFields({ type, entityId, coreFields }: RedisQueryCore): void {\n    coreFields.forEach(field => {\n      const redisKey = `${type}_${entityId}_${field}`;\n      return this.redis.getAllFieldsAndValues(redisKey);\n    });\n  }\n\n  getAllEntitySubfields({ type, entityId, subField, missionRelatedFields }: RedisQueryMissionRelated) {\n    missionRelatedFields.forEach(field => {\n      const redisKey = `${type}_${entityId}_${field}`;\n      this.redis.getValue(redisKey, subField);\n    });\n  }\n\n\n  public getAllSubKeys(key) {\n    return new Promise((resolve, reject) => {\n      this.redis.getAllFields(key)\n          .then(() => {\n\n          });\n    });\n  }\n\n\n}\n\n\n"]}