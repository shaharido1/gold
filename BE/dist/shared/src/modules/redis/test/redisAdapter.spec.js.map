{"version":3,"file":"redisAdapter.spec.js","sourceRoot":"","sources":["../../../../../../shared/src/modules/redis/test/redisAdapter.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport { RedisAdapter } from '../src/redisAdapter';\nimport { DockerAdapter } from '../../dockerode/dockerAdapter';\n\n\nlet redis: RedisAdapter;\n// let redisDocker: DockerAdapter;\nconst redisKey = 'key1234';\nconst contaioneName = 'redis_be_1';\nconst nultiFieldsToMultival = ['subKey1', 'subVal1', 'subKey2', 'subVal2', 'subKey3', 'subVal3', 'subKey4', 'subVal4', 'subKey5', 'subVal5'];\n\n\nxdescribe('Redis Adapter test', () => {\n  before('create class', () => {\n    redis = new RedisAdapter();\n  });\n\n  // todo reconnection.\n  // todo test big data of 1000 fields.\n  // todo multi exec.\n\n\n  it('redis connection', (done) => {\n    redis.initClientConnection()\n        .then((client) => {\n          console.log(`redis con`);\n          expect(client.connected).is.true;\n          done();\n        });\n  });\n\n  // it('reconnection to redis', (done) => {\n  //\n  // });\n\n  it('write to redis ', (done) => {\n    redis.setMultiFieldsToMultival(redisKey, nultiFieldsToMultival);\n    redis.execData()\n        .then((res) => {\n          expect(res.every(member => member === 'OK')).is.true;\n          done();\n        })\n        .catch(e => {\n          console.log(e);\n        });\n  });\n\n  it('Read all fields and values', (done) => {\n    redis.getAllFieldsAndValues(redisKey);\n    redis.execData()\n        .then((res) => {\n          expect(res).to.be.an('array').not.empty;\n          done();\n        })\n        .catch(e => {\n          console.log(e);\n        });\n  });\n  it('Read val of hash map', (done) => {\n    const subFilds = 'subKey2';\n    redis.getValue(redisKey, [subFilds]);\n    redis.execData()\n        .then((res) => {\n          expect(res).to.be.an('array').not.empty;\n          done();\n        })\n        .catch(e => {\n          console.log(e);\n        });\n  });\n\n  it('Read all fields in hash', (done) => {\n    redis.getAllFieldsHash('M_12541');\n    redis.execData()\n        .then((res) => {\n          console.log(res);\n          expect(res).to.be.an('array').not.empty;\n          done();\n        })\n        .catch(e => {\n          console.log(e);\n        });\n  });\n\n\n});\n"]}