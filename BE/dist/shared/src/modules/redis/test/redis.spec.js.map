{"version":3,"file":"redis.spec.js","sourceRoot":"","sources":["../../../../../../shared/src/modules/redis/test/redis.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai';\nimport { RedisClient } from 'redis';\nimport { DockerAdapter } from '../../dockerode/dockerAdapter';\nimport { GoldDbService } from '../GoldDbService';\nimport {\n  RedisDataType,\n  RedisEntity,\n  RedisInterceptionCoreFields,\n  RedisInterceptionMissionRelatedFields,\n  RedisInterceptionQuery\n} from '../model/dbInterface';\n\n\nenum settings {\n  Environment = 'config_env',\n  CustomPath = '../redis/test/custom.json'\n}\n\n\nconst batch: Array<RedisEntity> = [\n  {\n    type: RedisDataType.interception, entityId: '1234564',\n    mainField: RedisInterceptionCoreFields.static,\n    redisInput: [\n      { subField: 'name', value: 'ido' },\n      { subField: 'surName', value: 'shahar' },\n      { subField: 'address', value: '{City: \"Tel-Aviv\"}' }\n    ]\n  },\n  {\n    type: RedisDataType.interception, entityId: '1234564',\n    mainField: RedisInterceptionCoreFields.dynamic,\n    redisInput: [\n      { subField: 'location1', value: 'here' },\n      { subField: 'location1', value: 'there' }\n    ]\n  },\n  {\n    type: RedisDataType.interception, entityId: '1234564',\n    mainField: RedisInterceptionMissionRelatedFields.related_missions,\n    redisInput: [\n      { subField: 'M_12321', value: 'T' },\n      { subField: 'M_12541', value: 'T' }\n    ]\n  },\n  {\n    type: RedisDataType.interception, entityId: '1234564',\n    mainField: RedisInterceptionMissionRelatedFields.rank,\n    redisInput: [\n      { subField: 'M_12321', value: '2' },\n      { subField: 'M_12541', value: '6' }\n    ]\n  },\n  {\n    type: RedisDataType.interception, entityId: '1234564',\n    mainField: RedisInterceptionMissionRelatedFields.tags,\n    redisInput: [\n      { subField: 'M_12321', value: '[tag1,tag2,tag3]' },\n      { subField: 'M_12541', value: '[tag1,tag4]' }\n    ]\n  },\n  {\n    type: RedisDataType.mission,\n    entityId: '12321',\n    redisInput: [\n      { subField: 'E_1234564', value: 'T' },\n      { subField: 'E_1235231', value: 'T' }\n    ]\n  },\n  {\n    type: RedisDataType.mission,\n    entityId: '12541',\n    redisInput: [\n      { subField: 'E_1234564', value: 'T' },\n      { subField: 'E_9999999', value: 'T' }\n    ]\n  }\n];\n\nlet dbService: GoldDbService;\nlet redisDocker: DockerAdapter;\n\n\ndescribe('Test redis Adapter.', () => {\n\n  before((done) => {\n    redisDocker = new DockerAdapter();\n    redisDocker.startContainer('redis')\n        .then(() => {\n\n              done();\n            }\n        );\n  });\n\n\n  it('create redis adapter', (done) => {\n    dbService = new GoldDbService();\n    done();\n  });\n\n  it('redis connection to default configuration', (done) => {\n    expect(dbService.config).to.be.a('object');\n    expect(dbService.config).to.have.nested.property('config_redisHost');\n    expect(dbService.config).to.have.nested.property('config_redisPort');\n    done();\n\n  });\n\n\n  it('redis connection', (done) => {\n\n    dbService.connectToDataBase()\n        .then((status: string) => {\n          expect(status).to.equal('redis is ready');\n          done();\n        })\n        .catch(err => console.error(err));\n\n  });\n\n  // it('redis connection after falling', (done) => {\n  //   this.redisDocker.killContainer()\n  //       .then(() => {\n  //         redisDocker.startContainer('redis')\n  //             .then(() => {\n  //               done();\n  //             });\n  //       });\n  //\n  // });\n\n  it('write to redis', (done) => {\n    dbService.writeBatchToRedis(batch)\n        .then((res) => {\n          expect(res.length).is.equal(batch.length);\n          expect(res.every(memmber => memmber === 'OK')).is.true;\n          done();\n        }).catch(e => console.log(e));\n\n  });\n\n  const mission = [{\n        type: RedisDataType.mission,\n        entityId: '333',\n        coreFields: [{ type: RedisInterceptionCoreFields.static, entityId: '1245' }, '1221245']\n      }\n      ]\n  ;\n\n  // it('read from redis', (done) => {\n  //   redis.getAllEntityFields(mission)\n  //       .then((res) => {\n  //         expect(res.length).is.equal(batch.length);\n  //         expect(res.every(memmber => memmber === 'OK')).is.true;\n  //         done();\n  //       }).catch(e => console.log(e));\n  //\n  // });\n\n\n\n\n  // test redis connection from settings.\n});\n\n\n\n"]}