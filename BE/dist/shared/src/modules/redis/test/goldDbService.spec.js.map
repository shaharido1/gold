{"version":3,"file":"goldDbService.spec.js","sourceRoot":"","sources":["../../../../../../shared/src/modules/redis/test/goldDbService.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, assert } from 'chai';\nimport { GoldDbService } from '../src/goldDbService';\nimport {\n  RedisDataType,\n  RedisInterceptionCoreFields, RedisQueryGetInterception,\n  RedisQuerySet\n} from '../src/entity/redisQuer';\nimport { DockerAdapter } from '../../dockerode/dockerAdapter';\nimport {\n  entity1,\n  entity2,\n  entity3,\n  MissinWithFielsd,\n  missions,\n  oneEntityFromRedis,\n  oneMissionFromRedis\n} from './mokData';\nimport { error } from 'util';\n\n\nlet dbService: GoldDbService;\n\n\ndescribe('Test gold db service.', () => {\n\n  // before((done) => {\n  //   redisDocker = new DockerAdapter();\n  //   redisDocker.checkImageExist('redis').then();\n  //   redisDocker.startContainer('redis')\n  //       .then(() => {\n  //             done();\n  //           }\n  //       );\n  // });\n\n\n  it('create redis adapter', (done) => {\n    dbService = new GoldDbService();\n    done();\n  });\n\n  it('redis connection to default configuration', (done) => {\n    expect(dbService.config).to.be.a('object');\n    expect(dbService.config).to.have.nested.property('config_redisHost');\n    expect(dbService.config).to.have.nested.property('config_redisPort');\n    done();\n\n  });\n\n\n  it('redis connection', () => {\n    return dbService.connectToDataBase()\n        .then((status: string) => {\n          expect(status).to.equal('redis is ready');\n        })\n        .catch(err => {\n          console.error(err);\n          assert.isNotOk(err, 'Promise error');\n          throw err;\n        });\n  });\n\n  // xit('redis connection after falling', (done) => {\n  //   this.redisDocker.killContainer()\n  //       .then(() => {\n  //         redisDocker.startContainer('redis')\n  //             .then(() => {\n  //               done();\n  //             });\n  //       });\n  //\n  // });\n\n  it('write to redis entity1', function () {\n    return dbService.writeBatchToRedis(entity1)\n        .then(res => {\n          expect(res).to.be.ok;\n        })\n        .catch(err => {\n          assert.isNotOk(err, 'Promise error');\n          throw err;\n        });\n  });\n  it('write to redis entity2', function () {\n    return dbService.writeBatchToRedis(entity2)\n        .then(res => {\n          expect(res).to.be.ok;\n        }).catch(err => {\n          assert.isNotOk(err, 'Promise error');\n          throw err;\n        });\n\n  });\n  it('write to redis entity3', function () {\n    return dbService.writeBatchToRedis(entity3)\n        .then(res => {\n          expect(res).to.be.ok;\n        })\n        .catch(err => {\n          assert.isNotOk(err, 'Promise error');\n          throw err;\n        });\n  });\n\n  it('write to redis missions', function () {\n    return dbService.writeBatchToRedis(missions.map(mission => {\n      return { ...mission, entityId: mission.missionId };\n    })).then(res => {\n      expect(res).to.be.ok;\n    }).catch(err => {\n      assert.isNotOk(err, 'Promise error');\n      throw err;\n    });\n  });\n\n\n  it('Get one mission1 from redis with the top 10,000 score', () => {\n    return dbService.getTopInRangeOfScore(oneMissionFromRedis.missionQuery1, oneMissionFromRedis.min, oneMissionFromRedis.max)\n        .then((res) => {\n          // console.log(res);\n          expect(res).to.deep.equal(oneMissionFromRedis.missionQueryAnswer1);\n        }).catch(err => {\n          assert.isNotOk(err, 'Promise error');\n          throw err;\n        });\n  });\n\n  it('Get entity from redis with all marked fields', () => {\n    return dbService.getDataOfEntity(oneEntityFromRedis.queryOfEntity1)\n        .then((res) => {\n          // console.log(res);\n          expect(res).to.deep.equal(oneEntityFromRedis.queryOfEntity1Answer);\n        })\n        .catch(err => {\n          console.log(err);\n          assert.isNotOk(err, 'Promise error');\n        });\n  });\n\n\n  it('Get mission with all entities fields', () => {\n    return dbService.getFieldsOfMission(MissinWithFielsd.mission1, MissinWithFielsd.max, MissinWithFielsd.min)\n        .then((res) => {\n          console.log(res);\n          // expect(res).to.deep.equal(query2Answer);\n        })\n        .catch(err => {\n          assert.isNotOk(err, 'Promise error');\n          throw err;\n        });\n  });\n\n  // xit('Get mission1 with the Highest score in the set ', (done) => {\n  //   const redisKey = 'M_12541_byRank';\n  //   const answer = [{ key: 'E_123456444', score: 8.5 }];\n  //   dbService.getHighestScore(redisKey)\n  //       .then((res) => {\n  //         expect(res).to.deep.equal(answer);\n  //         done();\n  //       });\n  // });\n\n  // xit('Get mission1 with range from max to min', (done) => {\n  //   const redisKey = 'M_12541_byRank';\n  //   const answer = [{ key: 'E_123456444', score: 8.5 },\n  //     { key: 'E_123456422', score: 5.5 },\n  //     { key: 'E_12345645345', score: 3.9 },\n  //     { key: 'E_1234567', score: 0.5 },\n  //     { key: 'E_12345634', score: 0.5 },\n  //     { key: 'E_1234562', score: 0.5 },\n  //     { key: 'E_1234563', score: 0.3 },\n  //     { key: 'E_1231321', score: 0.2 },\n  //     { key: 'E_1234569', score: 0.1 }\n  //   ];\n  //\n  //   dbService.getTopInRangeOfScore(redisKey, 0, 100)\n  //       .then((res) => {\n  //         expect(res).to.deep.equal(answer);\n  //         done();\n  //       });\n  // });\n\n\n});\n"]}