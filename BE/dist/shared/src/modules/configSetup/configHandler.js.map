{"version":3,"file":"configHandler.js","sourceRoot":"","sources":["../../../../../shared/src/modules/configSetup/configHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { PathLike, readFileSync } from 'fs';\r\nimport * as path from 'path';\r\nimport { ConfigFileLocation } from './configFileLocation';\r\n\r\nexport enum EnvironementMode {\r\n  'prod' = 'prod',\r\n  'test' = 'test',\r\n  'dev' = 'dev',\r\n  'custom' = 'custom'\r\n}\r\n\r\nexport class ConfigHandler {\r\n  private environmentVariables: any;\r\n  public finalConfig: any;\r\n  public environmentMode: any;\r\n\r\n  constructor(configFileLocation: ConfigFileLocation, configInitial = 'config_') {\r\n    this.environmentVariables = this.getEnvironmentVariables(configInitial);\r\n    const configPath = this.resolveConfigFileLocation(configFileLocation);\r\n    this.getConfig(configPath);\r\n  }\r\n\r\n  private getEnvironmentVariables(configInitial): any {\r\n    const env: Object = process.env;\r\n    const envConfig = {};\r\n    Object.keys(env)\r\n        .filter(key => key.includes(configInitial, 0))\r\n        .forEach(key => {\r\n          envConfig[key] = env[key];\r\n        });\r\n    return envConfig;\r\n  }\r\n\r\n\r\n  /**\r\n   * This is the config setup location file chosen\r\n   * @param EnvironementMode.custom config file location.\r\n   */\r\n\r\n  public resolveConfigFileLocation(configFileLocation) {\r\n    let configPath;\r\n    // todo change to config_env to environment_mode\r\n    this.environmentMode = this.environmentVariables.config_env;\r\n    switch (this.environmentMode) {\r\n      case EnvironementMode.prod:\r\n        configPath = configFileLocation.CONFIG_PATH_PROD;\r\n        break;\r\n      case EnvironementMode.test:\r\n        configPath = path.join(__dirname, configFileLocation.CONFIG_PATH_TEST);\r\n        break;\r\n      case EnvironementMode.custom:\r\n        configPath = process.env.configFileLocation;\r\n        break;\r\n      case EnvironementMode.dev :\r\n      default:\r\n        configPath = path.join(__dirname, configFileLocation.CONFIG_PATH_DEV);\r\n    }\r\n    return configPath;\r\n\r\n  }\r\n\r\n  private getConfig(path: PathLike): any {\r\n    const configFileObject = this.readConfigFile(path);\r\n    this.compereObjectToFlat(configFileObject, this.environmentVariables);\r\n    return this.finalConfig = configFileObject;\r\n  }\r\n\r\n  private readConfigFile(path: PathLike): any {\r\n    const configString = readFileSync(path, 'utf8');\r\n    return JSON.parse(configString);\r\n  }\r\n\r\n\r\n  private compereObjectToFlat(objectToIterate, toCompere): void {\r\n    function iterateRecursive(object) {\r\n      Object.keys(object)\r\n          .forEach(key => {\r\n            const value = object[key];\r\n            if (typeof value === 'object') {\r\n              iterateRecursive(value);\r\n            }\r\n            else {\r\n              object[key] = toCompere[key] || value;\r\n            }\r\n          });\r\n    }\r\n\r\n    iterateRecursive(objectToIterate);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n"]}