{"version":3,"file":"rabbitConsumer .js","sourceRoot":"","sources":["../../../shared/rabbit/rabbitConsumer .ts"],"names":[],"mappings":"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","sourcesContent":["// import { Channel, Connection, connect } from 'amqplib/callback_api'\nimport { Message, Options, Replies } from 'amqplib/properties';\nimport { RabbitConfig } from '../interfase/rabitConfig';\nimport { rabbitDefaultConfig } from './rabbit.config.default';\nimport { Observable, Observer } from 'rxjs/index';\nimport { Channel, Connection } from 'amqplib';\nimport { RabbitConnectionManager } from './rabbitSetup';\n\ninterface Nack {\n  message: Message\n  allUpTo?: boolean;\n  requeue?: boolean\n}\n\ntype Ack = (message: Message, allUpTo?: boolean) => void\n\nexport class RabbitConsumer {\n  private rabbitConnectionManager: RabbitConnectionManager;\n  private config: RabbitConfig;\n  private rabbitChannel: Channel;\n  private consumerTag: Replies.Consume;\n  private observer: Observer<Message>;\n  private queue: string;\n  private queueOptions: Options.Consume;\n\n\n  constructor(rabbitConfig: RabbitConfig, connection?: Connection) {\n    this.config = rabbitConfig || rabbitDefaultConfig;\n    this.rabbitConnectionManager = new RabbitConnectionManager(this.config, connection);\n  }\n\n  private setUpListener(): void {\n    this.rabbitChannel.on('error', () => {\n      this.rabbitChannel = undefined;\n      this.consumeFromQueue();\n    });\n    this.rabbitChannel.on('close', () => {\n      console.log('connection closed');\n      this.rabbitChannel = undefined;\n      this.consumeFromQueue();\n    });\n    this.rabbitChannel.on('blocked', () => {\n      console.log('[rabbit]: connection blocked');\n    });\n    this.rabbitChannel.on('unblocked', () => {\n      console.log('[rabbit]: connection unblocked');\n    });\n  }\n\n  public getChannel(): Promise<Channel> {\n    return new Promise((resolve, reject) => {\n      if (this.rabbitChannel) {\n        return resolve(this.rabbitChannel);\n      }\n      this.rabbitConnectionManager.createChanne1()\n          .then(channel => {\n            this.rabbitChannel = channel;\n            this.setUpListener();\n            return resolve(channel);\n          })\n          .catch(err => {\n            console.log(err);\n            console.log('fatal - can\\'t create channel after multiple retries');\n            this.observer.error('fatal');\n            return reject(err);\n          });\n    });\n  }\n\n  private assertQueue(queue = this.queue, options = this.queueOptions): Promise<Channel> {\n    return new Promise((resolve, reject) => {\n      this.getChannel()\n          .then(channel => {\n            channel.assertQueue(queue, options)\n                .then((replay: Replies.AssertQueue) => {\n                  console.log(`queue ${replay.queue} has ${replay.consumerCount} consumers, and ${replay.messageCount} messages`);\n                  return resolve(channel);\n                })\n                .catch(err => {\n                  this.rabbitChannel = undefined;\n                  return this.assertQueue(queue, options);\n                });\n          });\n    });\n  }\n\n  public clientConsume(queue = this.config.config_rabbitQueueName, options: Options.Consume = this.config.config_queueOptions) {\n    this.queue = queue;\n    this.queueOptions = options;\n    return new Observable((observer: Observer<Message>) => {\n      this.observer = observer;\n      this.consumeFromQueue();\n    });\n  }\n\n  private consumeFromQueue(): void {\n    if (this.observer) {\n      this.assertQueue()\n          .then(channel => {\n            console.log('[rabbit]: start consuming');\n            channel.consume(\n                this.queue,\n                (msg: Message) => {\n                  this.observer.next(msg);\n                },\n                this.queueOptions\n            )\n                .then((consumerTag) => {\n                  this.consumerTag = consumerTag;\n                })\n                .catch(err => {\n                  this.rabbitChannel = undefined;\n                  console.log('[rabbit]: can\\'t consume');\n                  return this.consumeFromQueue();\n                });\n          });\n    }\n  }\n\n\n  public cancel(msg: Message) {\n    console.log('[rabbit]: cancel function');\n    return new Promise((resolve, reject) => {\n      this.rabbitChannel.nack(msg);\n      this.rabbitChannel.cancel(this.consumerTag.consumerTag);\n      this.observer.complete();\n\n    });\n  }\n\n  public ack(msg: Message) {\n\n    this.rabbitChannel.ack(msg);\n  }\n}"]}