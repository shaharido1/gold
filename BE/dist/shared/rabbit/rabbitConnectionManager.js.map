{"version":3,"file":"rabbitConnectionManager.js","sourceRoot":"","sources":["../../../shared/rabbit/rabbitConnectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Channel, connect, Connection } from 'amqplib';\r\nimport { rabbitDefaultConfig } from './rabbit.config.default';\r\nimport { RabbitConfig } from '../interfase/rabitConfig';\r\nimport { retryPromise } from '../utils/utils';\r\nimport { RabbitConsumer } from './rabbitConsumer';\r\nimport { RabbitProducer } from './rabbitProducer';\r\n\r\nexport enum CreatesType {\r\n  PRODUCER = 'producer',\r\n  CONSUMER = 'consumer'\r\n};\r\n\r\n\r\nexport class RabbitConnectionManager {\r\n  config: RabbitConfig;\r\n  private rabbitConnection: Connection;\r\n  private rabbitChannels: Array<Channel> = [];\r\n  private workingOnConnection: boolean = false;\r\n  private consumers: Array<RabbitConsumer> = [];\r\n  private producers: Array<RabbitProducer> = [];\r\n\r\n  constructor(rabbitConfig: RabbitConfig, connection?) {\r\n    this.config = rabbitConfig || rabbitDefaultConfig;\r\n    if (connection) {\r\n      this.rabbitConnection = connection;\r\n    }\r\n\r\n  }\r\n\r\n  private setUpListener() {\r\n    this.rabbitConnection.on('error', () => {\r\n      console.log('[rabbitConnection]: error');\r\n      this.reconnect();\r\n    });\r\n    this.rabbitConnection.on('close', () => {\r\n      console.log('[rabbitConnection]: connection closed');\r\n      this.reconnect();\r\n    });\r\n    this.rabbitConnection.on('blocked', () => {\r\n      console.log('[rabbitConnection]: connection blocked');\r\n    });\r\n    this.rabbitConnection.on('unblocked', () => {\r\n      console.log('[rabbitConnection]: connection unblocked');\r\n    });\r\n  }\r\n\r\n  public reconnect() {\r\n    this.destroyConnection().then(() => {\r\n      setTimeout(() => {\r\n        console.log('[rabbitConnection]: trying to reconnect after an error');\r\n        this.assertConnection().then(() => {\r\n          [this.consumers, this.producers].forEach((arr: Array<RabbitProducer | RabbitConsumer>) => {\r\n            arr.forEach((queueHandler) => {\r\n              this.rabbitConnection.createChannel().then((channel) => (\r\n                  queueHandler.recover(channel)\r\n              ));\r\n            });\r\n          });\r\n        });\r\n      }, 1000);\r\n    });\r\n\r\n  }\r\n\r\n  public spawnQueueWorker(isConsumerOrProducer: CreatesType): Promise<RabbitConsumer | RabbitProducer> {\r\n    return new Promise((resolve, reject) => {\r\n      this.assertConnection().then(() => {\r\n        console.log('[rabbitConnection]: trying to create new channel');\r\n        this.rabbitConnection.createChannel()\r\n            .then((channel) => {\r\n              console.log('[rabbitConnection]: new channel crated');\r\n              let queueHandler;\r\n              switch (isConsumerOrProducer) {\r\n                case 'consumer':\r\n                  queueHandler = new RabbitConsumer(this.config, channel, this.reCreateChannel);\r\n                  this.consumers.push(queueHandler);\r\n                  break;\r\n                case 'producer':\r\n                  queueHandler = new RabbitProducer(this.config, channel, this.reCreateChannel);\r\n                  this.producers.push(queueHandler);\r\n                  break;\r\n              }\r\n              // todo push channels?\r\n              // this.rabbitChannels.push(channel);\r\n              return resolve(queueHandler);\r\n            })\r\n            .catch(err => {\r\n\r\n              console.log('[rabbitConnection]: can\\'t create channel due to err - ' + err);\r\n              this.destroyConnection().then(() => {\r\n                return this.spawnQueueWorker(isConsumerOrProducer);\r\n              });\r\n            });\r\n      });\r\n    });\r\n  }\r\n\r\n  reCreateChannel() {\r\n    // todo push channels?\r\n    // check bind this..\r\n    return this.rabbitConnection.createChannel();\r\n  }\r\n\r\n  public assertConnection(): Promise<Connection> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.rabbitConnection) {\r\n        return resolve(this.rabbitConnection);\r\n      }\r\n      else if (this.workingOnConnection) {\r\n        setTimeout(() => {\r\n          return reject();\r\n        }, 1000);\r\n      }\r\n      else {\r\n        this.workingOnConnection = true;\r\n        const { config_rabbitUser, config_rabbitPassword, config_rabbitHost, config_rabbitPort } = this.config;\r\n        const connectionUrl = `amqp://${config_rabbitUser}:${config_rabbitPassword}@${config_rabbitHost}:${config_rabbitPort}`;\r\n        console.log('[rabbitConnection]: trying to connect to ' + connectionUrl);\r\n        retryPromise(() => <any>connect(connectionUrl), 5000)\r\n            .then((connection: Connection) => {\r\n              console.log('[rabbitConnection]: success creating connection');\r\n              this.workingOnConnection = false;\r\n              this.rabbitConnection = connection;\r\n              this.setUpListener();\r\n              return resolve(connection);\r\n            })\r\n            .catch(err => {\r\n              return reject(err);\r\n            });\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  private destroyConnection() {\r\n    return new Promise((resolve, rejects) => {\r\n      if (this.rabbitConnection) {\r\n        this.rabbitConnection.close()\r\n            .then(() => {\r\n              this.clean();\r\n              resolve();\r\n            })\r\n            .catch(err => {\r\n              console.log('[rabbitConnection]: destroy Connection dont work');\r\n              this.clean();\r\n              resolve();\r\n\r\n            });\r\n      }\r\n    });\r\n  }\r\n\r\n  clean() {\r\n    this.rabbitConnection = undefined;\r\n    this.rabbitChannels = [];\r\n  }\r\n}"]}