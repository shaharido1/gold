{"version":3,"file":"rabbitConnectionManager.js","sourceRoot":"","sources":["../../../shared/rabbit/rabbitConnectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Channel, connect, Connection } from 'amqplib';\nimport { rabbitDefaultConfig } from './rabbit.config.default';\nimport { RabbitConfig } from '../interfase/rabitConfig';\nimport { retryPromise } from '../utils/utils';\n\n\nexport class RabbitConnectionManager {\n  config: RabbitConfig;\n  private rabbitConnection: Connection;\n  private rabbitChannels: Array<Channel> = [];\n  private workingOnConnection: boolean = false;\n\n  constructor(rabbitConfig: RabbitConfig, connection) {\n    this.config = rabbitConfig || rabbitDefaultConfig;\n    if (connection) {\n      this.rabbitConnection = connection;\n    }\n  }\n\n  private setUpListener() {\n    this.rabbitConnection.on('error', () => {\n      this.rabbitConnection = undefined;\n      setTimeout(() => {\n        console.log('[rabbit]: trying to reconnect after an error');\n        this.assertConnection();\n      }, 1000);\n    });\n    this.rabbitConnection.on('close', () => {\n      console.log('[rabbit]: connection closed');\n    });\n    this.rabbitConnection.on('blocked', () => {\n      console.log('[rabbit]: connection blocked');\n    });\n    this.rabbitConnection.on('unblocked', () => {\n      console.log('[rabbit]: connection unblocked');\n    });\n  }\n\n\n  public createChannel(): Promise<Channel> {\n    return new Promise((resolve, reject) => {\n      this.assertConnection().then(() => {\n        this.rabbitConnection.createChannel()\n            .then((channel) => {\n              console.log('[rabbit]: channel crated');\n              this.rabbitChannels.push(channel);\n              return resolve(channel);\n            })\n            .catch(err => {\n              this.destroyConnection().then(() => {\n                console.log('[rabbit]: can\\'t create channel');\n                return this.createChannel();\n              });\n            });\n      });\n    });\n  }\n\n  private assertConnection(): Promise<Connection> {\n\n    return new Promise((resolve, reject) => {\n      if (this.rabbitConnection) {\n        this.workingOnConnection = false;\n        return resolve(this.rabbitConnection);\n      }\n      else if (this.workingOnConnection) {\n        setTimeout(() => {\n          return reject();\n        }, 1000);\n      }\n      else {\n        this.workingOnConnection = true;\n        const { config_rabbitUser, config_rabbitPassword, config_rabbitHost, config_rabbitPort } = this.config;\n        const connectionUrl = `amqp://${config_rabbitUser}:${config_rabbitPassword}@${config_rabbitHost}:${config_rabbitPort}`;\n        console.log('trying to connect to ' + connectionUrl);\n        retryPromise(() => <any>connect(connectionUrl), 5000)\n            .then((connection: Connection) => {\n              console.log('[rabbit]: success creating connection' + connection);\n              this.destroyConnection();\n              this.workingOnConnection = false;\n              this.rabbitConnection = connection;\n              this.setUpListener();\n              return resolve(connection);\n            })\n            .catch(err => {\n              return reject(err);\n            });\n      }\n    });\n\n  }\n\n  private async destroyConnection() {\n    if (this.rabbitConnection) {\n      await this.rabbitConnection.close();\n      this.rabbitChannels = [];\n      this.rabbitConnection = undefined;\n    }\n  }\n\n}"]}