{"version":3,"file":"rabbitChannel.js","sourceRoot":"","sources":["../../../shared/rabbit/rabbitChannel.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options, Replies } from 'amqplib/properties';\r\nimport { RabbitConfig } from '../interfase/rabitConfig';\r\nimport { rabbitDefaultConfig } from './rabbit.config.default';\r\nimport { Channel } from 'amqplib';\r\nimport { RabbitConnectionManager } from './rabbitConnectionManager';\r\nimport { Observable } from 'rxjs/index';\r\nimport { Observer } from 'rxjs/internal/types';\r\n\r\nexport abstract class RabbitChannel {\r\n  public rabbitConnectionManager: RabbitConnectionManager;\r\n  protected config: RabbitConfig;\r\n  protected rabbitChannel: Channel;\r\n  protected queue: string;\r\n  protected queueOptions: Options.Consume;\r\n\r\n  createChannel;\r\n  public observer: Observer<any>;\r\n\r\n  public constructor(rabbitConfig: RabbitConfig, channel, createChannel) {\r\n    this.config = rabbitConfig || rabbitDefaultConfig;\r\n    this.createChannel = createChannel;\r\n    this.rabbitChannel = channel;\r\n  }\r\n\r\n  protected setUpListener(): void {\r\n    this.rabbitChannel.on('error', () => {\r\n      console.log('[rabbitChanel]: error');\r\n      this.closeChannel().then(() => {\r\n        this.assertQueue();\r\n      });\r\n    });\r\n    this.rabbitChannel.on('close', () => {\r\n      console.log('[rabbitChanel]: connection closed');\r\n      this.closeChannel().then(() => {\r\n        this.assertQueue();\r\n      });\r\n    });\r\n    this.rabbitChannel.on('blocked', () => {\r\n      console.log('[rabbitChanel]: connection blocked');\r\n    });\r\n    this.rabbitChannel.on('unblocked', () => {\r\n      console.log('[rabbitChanel]: connection unblocked');\r\n    });\r\n  }\r\n\r\n  public channelsEvent() {\r\n    return new Observable((observer) => this.observer = observer);\r\n  }\r\n\r\n  public getChannel(): Promise<Channel> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.rabbitChannel) {\r\n        return resolve(this.rabbitChannel);\r\n      }\r\n      else {\r\n        this.createChannel\r\n            .then(channel => {\r\n              this.closeChannel();\r\n              this.rabbitChannel = channel;\r\n              // this.setUpListener();\r\n              return resolve(channel);\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n              console.log('fatal - can\\'t create channel after multiple retries');\r\n              return reject(err);\r\n            });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  public recover(channel) {\r\n    // todo\r\n    this.rabbitChannel = channel;\r\n    this.observer.next('recover');\r\n  }\r\n\r\n  public closeChannel() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.rabbitChannel) {\r\n        this.rabbitChannel.close();\r\n        this.rabbitChannel = undefined;\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  public assertQueue(queue = this.queue, options = this.queueOptions): Promise<Channel> {\r\n    return new Promise((resolve, reject) => {\r\n      this.getChannel()\r\n          .then(channel => {\r\n            channel.assertQueue(queue, options)\r\n                .then((replay: Replies.AssertQueue) => {\r\n                  console.log(`[rabbit]: queue ${replay.queue} has ${replay.consumerCount} consumers, and ${replay.messageCount} messages`);\r\n                  return resolve(channel);\r\n                })\r\n                .catch(err => {\r\n                  this.rabbitChannel = undefined;\r\n                  return this.assertQueue(queue, options);\r\n                });\r\n          }).catch(err => {\r\n        console.log('fatal');\r\n        return reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n\r\n"]}