{"version":3,"file":"rabbitConsumer.js","sourceRoot":"","sources":["../../../shared/rabbit/rabbitConsumer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message, Options, Replies } from 'amqplib/properties';\nimport { Observable, Observer } from 'rxjs/index';\nimport { RabbitChannel } from './rabbitChannel';\n\n\nexport class RabbitConsumer extends RabbitChannel {\n  private consumerTag: Replies.Consume;\n  private observer: Observer<Message>;\n\n\n  public clientConsume(queue = this.config.config_rabbitQueueName, options: Options.Consume = this.config.config_queueOptions) {\n    this.queue = queue;\n    this.queueOptions = options;\n    return new Observable((observer: Observer<Message>) => {\n      this.observer = observer;\n      this.consumeFromQueue();\n    });\n  }\n\n\n  protected setUpListener(): void {\n    this.rabbitChannel.on('error', () => {\n      console.log('[rabbitChanel]: error');\n      this.closeChannel().then( () => {\n        this.consumeFromQueue();\n      })\n    });\n    this.rabbitChannel.on('close', () => {\n      console.log('[rabbitChanel]: connection closed');\n      this.closeChannel().then( () => {\n        this.consumeFromQueue();\n      })\n    });\n    this.rabbitChannel.on('blocked', () => {\n      console.log('[rabbit]: connection blocked');\n    });\n    this.rabbitChannel.on('unblocked', () => {\n      console.log('[rabbit]: connection unblocked');\n    });\n  }\n\n  private consumeFromQueue(): void {\n    if (this.observer) {\n      this.assertQueue()\n          .then(channel => {\n            console.log('[rabbit]: start consuming');\n            this.setUpListener()\n            channel.consume(\n                this.queue,\n                (msg: Message) => {\n                  this.observer.next(msg);\n                },\n                this.queueOptions\n            )\n                .then((consumerTag) => {\n                  this.consumerTag = consumerTag;\n                })\n                .catch(err => {\n                  this.closeChannel();\n                  console.log('[rabbit]: can\\'t consume');\n                  return this.consumeFromQueue();\n                });\n          })\n          .catch(err => {\n            console.log(\"fatal2\");\n            this.observer.error(\"fatal!\")\n          })\n    }\n  }\n\n  public cancel(msg: Message) {\n    console.log('[rabbit]: cancel function');\n    return new Promise((resolve, reject) => {\n      this.rabbitChannel.nack(msg);\n      this.rabbitChannel.cancel(this.consumerTag.consumerTag);\n      this.observer.complete();\n\n    });\n  }\n\n  public ack(msg: Message) {\n\n    this.rabbitChannel.ack(msg);\n  }\n}"]}