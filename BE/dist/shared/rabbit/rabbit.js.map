{"version":3,"file":"rabbit.js","sourceRoot":"","sources":["../../../shared/rabbit/rabbit.ts"],"names":[],"mappings":"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","sourcesContent":["import { Channel, Connection, connect } from 'amqplib/callback_api';\r\nimport { Message, Replies } from 'amqplib/properties';\r\nimport { RabbitConfig } from '../interfase/rabitConfig';\r\nimport { rabbitDefaultConfig } from './rabbit.config.default';\r\n\r\n\r\nexport class RabbitAdapter {\r\n\r\n  config: RabbitConfig;\r\n  private rabbitConnection: Connection;\r\n  private rabbitChannel: Channel;\r\n\r\n  constructor(rabbitConfig: RabbitConfig) {\r\n    this.config = rabbitConfig || rabbitDefaultConfig;\r\n  }\r\n\r\n  public initConnection(): Promise<{ ok: Replies.AssertQueue, channel: Channel }> {\r\n    return new Promise((resolve, reject) => {\r\n      this.intervalConnection().then(() => {\r\n        this.createChannel().then(() => {\r\n          this.assertQueue(this.config.config_rabbitQueueName).then(ok => {\r\n            return resolve({ ok: ok, channel: this.rabbitChannel });\r\n          });\r\n        });\r\n      }).catch(() => reject('failed to connect'));\r\n    });\r\n  }\r\n\r\n  private intervalConnection(): Promise<Connection> {\r\n    let i = 0;\r\n    return new Promise((resolve, reject) => {\r\n      const tryToConnect = setInterval(() => {\r\n        this.connectToRabbitMQ()\r\n            .then((connection) => {\r\n              clearInterval(tryToConnect);\r\n              return resolve(connection);\r\n            })\r\n            .catch(err => console.log('failed for the ' + i++ + 'time, due to ' + err));\r\n      }, 10000);\r\n    });\r\n  }\r\n\r\n  private connectToRabbitMQ(): Promise<Connection> {\r\n    const {config_rabbitUser, config_rabbitPassword, config_rabbitHost, config_rabbitPort } = this.config;\r\n    return new Promise((resolve, reject) => {\r\n      console.log('trying to connect to ' + `amqp://${config_rabbitUser}:${config_rabbitPassword}@${config_rabbitHost}:${config_rabbitPort}`);\r\n      connect(`amqp://${config_rabbitUser}:${config_rabbitPassword}@${config_rabbitHost}:${config_rabbitPort}`, (err, conn) => {\r\n        if (conn) {\r\n          console.log('connected to rabbit!');\r\n          this.rabbitConnection = conn;\r\n          return resolve(conn);\r\n        }\r\n        else if (err) {\r\n          console.log('fail to connect');\r\n          console.log(err);\r\n          return reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private createChannel(connection?): Promise<Channel> {\r\n    return new Promise((resolve, reject) => {\r\n      const conn = connection || this.rabbitConnection;\r\n      conn.createChannel((err, channel) => {\r\n        if (channel) {\r\n          this.rabbitChannel = channel;\r\n          return resolve(channel);\r\n        }\r\n        else if (err) {\r\n          console.log('fail to connect');\r\n          console.log(err);\r\n          return reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public assertQueue(queue, options?): Promise<Replies.AssertQueue> {\r\n    return new Promise((resolve, reject) => {\r\n      this.rabbitChannel.assertQueue(queue, options, (err, ok) => {\r\n        if (ok) {\r\n          return resolve(ok);\r\n        }\r\n        else if (err) {\r\n          console.log(err);\r\n          return reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public sendToQueue(message, queue = this.config.config_rabbitQueueName) {\r\n    this.rabbitChannel.sendToQueue(queue, Buffer.from(message), { persistent: this.config.config_persistent });\r\n  }\r\n\r\n  public consumeFromQueue(queue = this.config.config_rabbitQueueName, options = this.config.config_queueOptions) : Promise<Message> {\r\n    return new Promise ((resolve, reject) => {\r\n        this.rabbitChannel.consume(queue, (msg: Message) => resolve(msg), options, (err : any, ok : Replies.Consume) => {\r\n          if (err) {\r\n            console.log(err);\r\n            return reject(err)\r\n          }\r\n          else if (ok) {\r\n            console.log(\"ok\" + JSON.stringify(ok))\r\n          }\r\n        })\r\n\r\n    })\r\n\r\n  }\r\n\r\n}"]}