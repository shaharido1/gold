{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../shared/utils/utils.ts"],"names":[],"mappings":";;AAAA,sBAA6B,OAA2B,EAAE,OAAO,GAAG,IAAI,EAAE,MAAO;IAC/E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;YAChC,OAAO,EAAE;iBACJ,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACf,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACxB,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,EAAE;oBACzB,OAAO,MAAM,CAAC,YAAY,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;iBAChD;qBACI;oBACH,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,CAAC,EAAE,GAAG,eAAe,GAAG,GAAG,CAAC,CAAC;iBAC9D;YACH,CAAC,CAAC,CAAC;QACT,CAAC,EAAE,OAAO,CAAC,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC;AAnBD,oCAmBC","sourcesContent":["export function retryPromise(promise: () => Promise<any>, timeout = 5000, maxTry?): Promise<any> {\n  return new Promise((resolve, reject) => {\n    let i = 0;\n    const interval = setInterval(() => {\n      promise()\n          .then((result) => {\n            clearInterval(interval);\n            return resolve(result);\n          })\n          .catch((err) => {\n            if (maxTry && i >= maxTry) {\n              return reject('failed for' + maxTry + 'times');\n            }\n            else {\n              console.log('failed for the ' + i++ + 'time, due to ' + err);\n            }\n          });\n    }, timeout);\n  });\n}"]}