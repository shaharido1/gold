{"version":3,"file":"configFetch.js","sourceRoot":"","sources":["../../shared/configFetch.ts"],"names":[],"mappings":";;AAAA,iCAAkD;AAGlD;IAWE,YAAY,aAAa,EAAE,SAAS,EAAE,mBAAoB;QAR1D,wBAAmB,GAAY;YAC7B,IAAI,EAAE,eAAe;YACrB,IAAI,EAAE,MAAM;SACb,CAAC;QAMA,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC;IAC7E,CAAC;IAED,IAAI;QACF,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC3B,iCAAiC;YACjC,kBAAkB;YAClB,OAAO;YAEP,MAAM,GAAG,GAAG,UAAU,IAAI,CAAC,mBAAmB,CAAC,IAAI,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAErG,MAAM,OAAO,GAAuB;gBAClC,MAAM,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;aAC7B,CAAC;YAEF,eAAK,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC;iBAClB,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACf,+BAA+B;gBAC/B,MAAM,YAAY,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACrC,MAAM,GAAG,GAAW,OAAO,CAAC,GAAG,CAAC;gBAChC,MAAM,SAAS,GAAS,EAAE,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;qBACX,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;qBACrC,GAAG,CAAC,GAAG,CAAC,EAAE;oBACT,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBACP,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAChC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC1B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAGlB,IAAI,CAAC,WAAW,qBAAQ,IAAI,CAAC,aAAa,IAAE,YAAY,EAAE,SAAS,GAAE,CAAC;gBACtE,OAAO,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACnC,CAAC,CAAC;iBACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAExC,CAAC,CAAC,CAAC;IAEL,CAAC;CAEF;AAzDD,kCAyDC","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\r\nimport { Address } from './interfaces/path';\r\n\r\nexport class ConfigFetch {\r\n\r\n  route: string;\r\n  configServerAddress: Address = {\r\n    host: '172.30.65.113',\r\n    port: '5000'\r\n  };\r\n  defaultConfig;\r\n  finalConfig;\r\n\r\n\r\n  constructor(DefaultConfig, routeName, configServerAddress?) {\r\n    this.defaultConfig = DefaultConfig;\r\n    this.route = routeName;\r\n    this.configServerAddress = configServerAddress || this.configServerAddress;\r\n  }\r\n\r\n  init(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      console.log('start Fetch');\r\n      // const request: RequestInit = {\r\n      //   method: 'GET'\r\n      //   };\r\n\r\n      const url = `http://${this.configServerAddress.host}:${this.configServerAddress.port}/${this.route}`;\r\n\r\n      const request: AxiosRequestConfig = {\r\n        params: { type: 'producer' }\r\n      };\r\n\r\n      axios.get(url, request)\r\n          .then(response => {\r\n            // console.log('serverConfig');\r\n            const serverConfig = (response.data);\r\n            const env: object = process.env;\r\n            const envConfig : any = {};\r\n            Object.keys(env)\r\n                .filter(key => key.includes('TES', 0))\r\n                .map(key => {\r\n                  envConfig[key] = env[key];\r\n                });\r\n            console.log('!@');\r\n            console.log(this.defaultConfig);\r\n            console.log(serverConfig);\r\n            console.log(envConfig);\r\n            console.log('!@');\r\n\r\n\r\n            this.finalConfig = { ...this.defaultConfig, serverConfig, envConfig };\r\n            return resolve(this.finalConfig);\r\n          })\r\n          .catch(err => console.error(err));\r\n\r\n    });\r\n\r\n  }\r\n\r\n}"]}