{"version":3,"file":"configFetch.js","sourceRoot":"","sources":["../../shared/configFetch.ts"],"names":[],"mappings":"AAAA,wDAAwD;AACxD,kDAAkD;AAClD,EAAE;AACF,6BAA6B;AAC7B,EAAE;AACF,mBAAmB;AACnB,qCAAqC;AACrC,6BAA6B;AAC7B,mBAAmB;AACnB,OAAO;AACP,mBAAmB;AACnB,iBAAiB;AACjB,EAAE;AACF,EAAE;AACF,kEAAkE;AAClE,0CAA0C;AAC1C,8BAA8B;AAC9B,kFAAkF;AAClF,MAAM;AACN,EAAE;AACF,2BAA2B;AAC3B,gDAAgD;AAChD,oCAAoC;AACpC,0CAA0C;AAC1C,2BAA2B;AAC3B,gBAAgB;AAChB,EAAE;AACF,8GAA8G;AAC9G,EAAE;AACF,8CAA8C;AAC9C,uCAAuC;AACvC,WAAW;AACX,EAAE;AACF,gCAAgC;AAChC,gCAAgC;AAChC,8CAA8C;AAC9C,oDAAoD;AACpD,+CAA+C;AAC/C,0CAA0C;AAC1C,+BAA+B;AAC/B,yDAAyD;AACzD,gCAAgC;AAChC,+CAA+C;AAC/C,sBAAsB;AACtB,iCAAiC;AACjC,+CAA+C;AAC/C,yCAAyC;AACzC,sCAAsC;AACtC,iCAAiC;AACjC,EAAE;AACF,EAAE;AACF,qFAAqF;AACrF,gDAAgD;AAChD,eAAe;AACf,+CAA+C;AAC/C,EAAE;AACF,UAAU;AACV,EAAE;AACF,MAAM;AACN,EAAE;AACF,IAAI","sourcesContent":["// // import axios, { AxiosRequestConfig } from 'axios';\r\n// // import { Address } from './interfaces/path';\r\n//\r\n// export class ConfigFetch {\r\n//\r\n//   route: string;\r\n//   configServerAddress: Address = {\r\n//     host: '172.30.65.113',\r\n//     port: '5000'\r\n//   };\r\n//   defaultConfig;\r\n//   finalConfig;\r\n//\r\n//\r\n//   constructor(DefaultConfig, routeName, configServerAddress?) {\r\n//     this.defaultConfig = DefaultConfig;\r\n//     this.route = routeName;\r\n//     this.configServerAddress = configServerAddress || this.configServerAddress;\r\n//   }\r\n//\r\n//   init(): Promise<any> {\r\n//     return new Promise((resolve, reject) => {\r\n//       console.log('start Fetch');\r\n//       // const request: RequestInit = {\r\n//       //   method: 'GET'\r\n//       //   };\r\n//\r\n//       const url = `http://${this.configServerAddress.host}:${this.configServerAddress.port}/${this.route}`;\r\n//\r\n//       const request: AxiosRequestConfig = {\r\n//         params: { type: 'producer' }\r\n//       };\r\n//\r\n//       axios.get(url, request)\r\n//           .then(response => {\r\n//             // console.log('serverConfig');\r\n//             const serverConfig = (response.data);\r\n//             const env: object = process.env;\r\n//             const envConfig : any = {};\r\n//             Object.keys(env)\r\n//                 .filter(key => key.includes('TES', 0))\r\n//                 .map(key => {\r\n//                   envConfig[key] = env[key];\r\n//                 });\r\n//             console.log('!@');\r\n//             console.log(this.defaultConfig);\r\n//             console.log(serverConfig);\r\n//             console.log(envConfig);\r\n//             console.log('!@');\r\n//\r\n//\r\n//             this.finalConfig = { ...this.defaultConfig, serverConfig, envConfig };\r\n//             return resolve(this.finalConfig);\r\n//           })\r\n//           .catch(err => console.error(err));\r\n//\r\n//     });\r\n//\r\n//   }\r\n//\r\n// }"]}