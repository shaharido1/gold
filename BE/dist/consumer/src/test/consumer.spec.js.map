{"version":3,"file":"consumer.spec.js","sourceRoot":"","sources":["../../../../consumer/src/test/consumer.spec.ts"],"names":[],"mappings":"AAAA,yDAAyD;AACzD,kBAAkB;AAClB,uCAAuC;AACvC,yCAAyC;AACzC,EAAE;AACF,EAAE;AACF,EAAE;AACF,kCAAkC;AAClC,yCAAyC;AACzC,yEAAyE;AACzE,4CAA4C;AAC5C,oCAAoC;AACpC,UAAU;AACV,yEAAyE;AACzE,4CAA4C;AAC5C,mCAAmC;AACnC,UAAU;AACV,EAAE;AACF,6EAA6E;AAC7E,6BAA6B;AAC7B,oCAAoC;AACpC,EAAE;AACF,2BAA2B;AAC3B,qCAAqC;AACrC,qBAAqB;AACrB,iBAAiB;AACjB,2CAA2C;AAC3C,EAAE;AACF,UAAU;AACV,EAAE;AACF,QAAQ;AACR,MAAM","sourcesContent":["/// <reference path=\"typings/globals/mocha/index.d.ts\" />\n// import 'mocha';\n// // const assert = require('assert');\n// import { expect, assert } from 'chai';\n//\n//\n//\n// describe('Array', function () {\n//   describe('#indexOf()', function () {\n//     it('should return -1 when the value is not present', function () {\n//       const index = [1, 2, 3].indexOf(4);\n//       expect(index).to.equal(-1);\n//     });\n//     it('should return -1 when the value is not present', function () {\n//       const index = [1, 2, 3].indexOf(1);\n//       expect(index).to.equal(0);\n//     });\n//\n//     it('should return -1 when the value is not present', function (done) {\n//       const m = [1, 2, 3];\n//       const index = m.indexOf(1);\n//\n//       setTimeout(() => {\n//         expect(2).to.be.undefined;\n//         // done();\n//       }, 1000)\n//       expect(undefined).to.be.undefined;\n//\n//     });\n//\n//   });\n// });"]}