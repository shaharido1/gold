{"version":3,"file":"validateNRepack.js","sourceRoot":"","sources":["../../../consumer/src/validateNRepack.ts"],"names":[],"mappings":";;AACA,+EAA4E;AAC5E,yEAAsE;AACtE,qGAAkG;AAClG,+DAA+D;AAE/D,qBAA6B,SAAQ,uBAAU;IAM7C;QACE,KAAK,CAAC,oCAAkB,CAAC,CAAC;QAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;IAEd,CAAC;IAED,IAAI;QACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,iDAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;aACf,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,iEAAiE;QACjE,kCAAkC;QAClC,kDAAkD;QAClD,MAAM;IACR,CAAC;IAGD,OAAO,CAAC,GAAG;QACT,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;YACpC,OAAO,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IAEL,CAAC;CACF;AAlCD,0CAkCC","sourcesContent":["import { Connection, Message } from 'amqplib';\r\nimport { GoldServer } from '../../shared/src/modules/goldServer/goldServer';\r\nimport { Consumer } from '../../shared/src/modules/consumer/consumer';\r\nimport { RabbitConnectionManager } from '../../shared/src/modules/rabbit/rabbitConnectionManager';\r\nimport { configFileLocation } from '../config/config.filePath';\r\n\r\nexport class ValidateNRepack extends GoldServer {\r\n\r\n  private connectionManager: RabbitConnectionManager;\r\n  private consumer: Consumer;\r\n  private connection: Connection;\r\n\r\n  constructor() {\r\n    super(configFileLocation);\r\n    this.init();\r\n\r\n  }\r\n\r\n  init() {\r\n    this.connectionManager = new RabbitConnectionManager(this.config.rabbitConfig);\r\n    this.consumer = new Consumer(this.config.rabbitConfig, this.connectionManager);\r\n    this.consumer.init()\r\n        .then(() => {\r\n          this.consumer.consumeFromQueue(this.doStuff);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    // this.connectionManager.assertConnection().then(connection => {\r\n    //   this.connection = connection;\r\n    //   this.consumer.consumeFromQueue(this.doStuff);\r\n    // });\r\n  }\r\n\r\n\r\n  doStuff(msg): Promise<Message> {\r\n    return new Promise((resolve, reject) => {\r\n      console.log(msg.content.toString());\r\n      return resolve();\r\n    });\r\n\r\n  }\r\n}"]}