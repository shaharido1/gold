{"version":3,"file":"consumer.js","sourceRoot":"","sources":["../../../consumer/src/consumer.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,0EAAuE;AAEvE,wEAAoE;AACpE,+DAA+D;AAE/D,uEAAoE;AAGpE;IAeE;QATQ,cAAS,GAAc;YAC7B,OAAO,EAAE,CAAC;YACV,cAAc,EAAE,CAAC;YACjB,SAAS,EAAE,CAAC;YACZ,SAAS,EAAE,CAAC;SACb,CAAC;QACM,gBAAW,GAAgB,IAAI,0BAAW,EAAE,CAAC;QACrD,kBAAa,GAAG,EAAE,CAAC;QAGjB,IAAI,CAAC,MAAM,GAAmB,IAAI,6BAAa,CAAC,oCAAkB,CAAC,CAAC,WAAW,CAAC;QAChF,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACnE,mEAAmE;QACnE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAGK,IAAI;;YACR,6FAA6F;YAC7F,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBACxD,IAAI,CAAC,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;gBAC5C,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;qBACnD,SAAS,CAAC,OAAO,CAAC,EAAE;oBACnB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;yBAChB,IAAI,CAAC,GAAG,EAAE;wBACT,IAAI;4BACF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;4BACnB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;yBAClC;wBACD,OAAO,CAAC,EAAE;4BACR,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;4BAC1B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAChB;oBACH,CAAC,CAAC;yBACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;wBACX,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACf,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;wBAC3B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oBACtC,CAAC,CAAC,CAAC;gBACT,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,CAAC;KAAA;IAGD,OAAO,CAAC,GAAG;QACT,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,uBAAuB;YAEvB,OAAO,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAA;QACF,4CAA4C;QAC5C,4CAA4C;QAC5C,4CAA4C;QAC5C,yDAAyD;QACzD,2BAA2B;QAC3B,2BAA2B;QAC3B,MAAM;QACN,WAAW;QACX,wGAAwG;QACxG,gFAAgF;QAChF,uDAAuD;QACvD,oCAAoC;QACpC,qDAAqD;QACrD,wBAAwB;QACxB,+FAA+F;QAC/F,mHAAmH;QACnH,cAAc;QACd,iCAAiC;QACjC,4BAA4B;QAC5B,0BAA0B;QAC1B,2CAA2C;QAC3C,4BAA4B;QAC5B,UAAU;QACV,MAAM;QACN,MAAM;IACR,CAAC;CAGF;AArFD,4BAqFC","sourcesContent":["import { ConsumerConfig } from './model/consumer.config.interface';\nimport { RedisMqAdapter } from '../../shared/redis/redisMQ';\nimport { ConfigHandler } from '../../shared/configSetup/configHandler';\nimport { TimeSetup } from '../../shared/measureTime/TimeSetup';\nimport { MeasureTime } from '../../shared/measureTime/measeuerTime';\nimport { configFileLocation } from '../config/config.filePath';\nimport { Message } from 'amqplib';\nimport { RabbitConsumer } from '../../shared/rabbit/rabbitConsumer';\n\n\nexport class Consumer {\n\n  private config: ConsumerConfig;\n  private  rabbitConsumer: RabbitConsumer;\n  private redisAdapter: RedisMqAdapter;\n  private rabbitStartTime: number;\n  private timeSetup: TimeSetup = {\n    avgTime: 0,\n    numberOfRounds: 0,\n    roundTime: 0,\n    totalTime: 0\n  };\n  private measureTime: MeasureTime = new MeasureTime();\n  subscriptions = [];\n\n  constructor() {\n    this.config = <ConsumerConfig>new ConfigHandler(configFileLocation).finalConfig;\n    this.rabbitConsumer = new RabbitConsumer(this.config.rabbitConfig);\n    // this.redisAdapter = new RedisMqAdapter(this.config.redisConfig);\n    this.init();\n  }\n\n\n  async init() {\n    // Promise.all([this.redisAdapter.initRMSQ(), this.rabbitConsumer.getChannel()]).then(() => {\n    Promise.all([this.rabbitConsumer.getChannel()]).then(() => {\n      this.rabbitStartTime = new Date().getTime();\n      const subscription = this.rabbitConsumer.clientConsume()\n          .subscribe(message => {\n            this.doStuff(message)\n                .then(() => {\n                  try {\n                    console.log('ack');\n                    this.rabbitConsumer.ack(message);\n                  }\n                  catch (e) {\n                    console.log('failed ack');\n                    console.log(e);\n                  }\n                })\n                .catch((e) => {\n                  console.log(e);\n                  console.log('canceling..');\n                  this.rabbitConsumer.cancel(message);\n                });\n          }, err => console.log(err));\n      this.subscriptions.push(subscription);\n    }).catch(err => Error(err));\n  }\n\n\n  doStuff(msg): Promise<Message> {\n    return new Promise((resolve, reject) => {\n      // setTimeout({},3000);\n\n      return resolve();\n    })\n    //   const rabbitEnd = new Date().getTime();\n    //   const rawData = msg.content.toString();\n    //   const parsedData = JSON.parse(rawData);\n    //   if (this.rabbitStartTime > parsedData.rabbitStart) {\n    //     console.log('pass');\n    //     return resolve(msg);\n    //   }\n    //   else {\n    //     this.measureTime.showMeasureTime(rabbitEnd, parsedData.rabbitStart, this.timeSetup, this.config);\n    //     const messageWithTime = this.measureTime.timeWrapper(parsedData.message);\n    //     const timeToWightToRedis = new Date().getTime();\n    //     console.log(messageWithTime);\n    //     this.redisAdapter.sendMassage(messageWithTime)\n    //         .then(() => {\n    //           if (this.timeSetup.numberOfRounds % this.config.config_totalNumberOfRounds == 0) {\n    //             console.log(`Time to write to redis: ${(new Date().getTime() - timeToWightToRedis) * 0.001} sec\\n`);\n    //           }\n    //           return resolve(msg);\n    //         }).catch(err => {\n    //       console.log(err);\n    //       // todo error log handling etc....\n    //       return reject(msg);\n    //     });\n    //   }\n    // });\n  }\n\n\n}"]}