{"version":3,"file":"consumer.spec.js","sourceRoot":"","sources":["../../../consumer/src/consumer.spec.ts"],"names":[],"mappings":"AAAA,KAAK;AACL,KAAK;AACL,sCAAsC;AACtC,wCAAwC;AACxC,KAAK;AACL,mBAAmB;AACnB,iCAAiC;AACjC,iCAAiC;AACjC,KAAK;AACL,eAAe;AACf,KAAK;AACL,KAAK;AACL,KAAK;AACL,KAAK;AACL,mBAAmB;AACnB,6BAA6B;AAC7B,OAAO;AACP,KAAK;AACL,EAAE;AACF,EAAE;AACF,EAAE;AACF,8DAA8D;AAC9D,EAAE;AACF,2CAA2C;AAC3C,gCAAgC;AAChC,6BAA6B;AAC7B,2BAA2B;AAC3B,0CAA0C;AAC1C,iCAAiC;AACjC,sBAAsB;AACtB,4CAA4C;AAC5C,gBAAgB;AAChB,SAAS;AACT,QAAQ;AACR,EAAE;AACF,yBAAyB;AACzB,cAAc;AACd,QAAQ;AACR,EAAE;AACF,EAAE;AACF,2CAA2C;AAC3C,4BAA4B;AAC5B,+DAA+D;AAC/D,uCAAuC;AACvC,uBAAuB;AACvB,6CAA6C;AAC7C,UAAU;AACV,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,mDAAmD;AACnD,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,mEAAmE;AACnE,uCAAuC;AACvC,uBAAuB;AACvB,6CAA6C;AAC7C,UAAU;AACV,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,iDAAiD;AACjD,4BAA4B;AAC5B,uDAAuD;AACvD,wCAAwC;AACxC,wBAAwB;AACxB,iDAAiD;AACjD,UAAU;AACV,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,0DAA0D;AAC1D,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,oDAAoD;AACpD,iDAAiD;AACjD,4DAA4D;AAC5D,yBAAyB;AACzB,oBAAoB;AACpB,cAAc;AACd,QAAQ;AACR,EAAE;AACF,0DAA0D;AAC1D,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,+BAA+B;AAC/B,mCAAmC;AACnC,gFAAgF;AAChF,qDAAqD;AACrD,6DAA6D;AAC7D,wEAAwE;AACxE,4CAA4C;AAC5C,oDAAoD;AACpD,cAAc;AACd,QAAQ;AACR,EAAE;AACF,mEAAmE;AACnE,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,+CAA+C;AAC/C,wGAAwG;AACxG,qDAAqD;AACrD,wEAAwE;AACxE,wEAAwE;AACxE,4CAA4C;AAC5C,+DAA+D;AAC/D,cAAc;AACd,QAAQ;AACR,EAAE;AACF,oDAAoD;AACpD,oDAAoD;AACpD,gBAAgB;AAChB,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,EAAE;AACF,MAAM","sourcesContent":["// //\r\n// //\r\n// // const mockProd = new mockProd();\r\n// // const consumser = new consumeer();\r\n// //\r\n// // before all =>\r\n// // mockProd.init('qeueu_tst');\r\n// // // push to entites (1 -199)\r\n// //\r\n// // consumser\r\n// //\r\n// //\r\n// //\r\n// //\r\n// // afterAll => {\r\n// //   mockProd - kill queue\r\n// // }\r\n// //\r\n//\r\n//\r\n//\r\n// import { RabbitAdapter } from '../../shared/rabbit/rabbit';\r\n//\r\n// describe(\"publisher DB methods\", () => {\r\n//   let rabbit : RabbitAdapter;\r\n//   let mockProd : MockProd;\r\n//   beforeAll( (done) => {\r\n//     rabbit = new RabbitAdapter('test');\r\n//     mockProd = new MockProd();\r\n//     mockProd.init()\r\n//     rabbit.initConnection().then( () => {\r\n//       done();\r\n//     })\r\n//   });\r\n//\r\n//   afterAll((done) => {\r\n//     // todo\r\n//   });\r\n//\r\n//\r\n//   it(\"should add mission to db\", () => {\r\n//     expect.assertions(2);\r\n//     return missionMethod.add(missionToAdd).then(mission => {\r\n//       expect(mission).toBeDefined();\r\n//       if (mission) {\r\n//         expect(mission._id).toBeDefined();\r\n//       }\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//   it(\"should get mission from db\", async () => {\r\n//     expect.assertions(3);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     return missionMethod.get(missionAdded._id).then(mission => {\r\n//       expect(mission).toBeDefined();\r\n//       if (mission) {\r\n//         expect(mission._id).toBeDefined();\r\n//       }\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//   it(\"should get all mission from db\", () => {\r\n//     expect.assertions(2);\r\n//     return missionMethod.getAll().then(missions => {\r\n//       expect(missions).toBeDefined();\r\n//       if (missions) {\r\n//         expect(missions.length).toBeDefined();\r\n//       }\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//   it(\"should remove mission from db\", async (done) => {\r\n//     expect.assertions(2);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     await missionMethod.remove(missionAdded._id);\r\n//     return missionMethod.get(missionAdded._id)\r\n//         .then(mission => expect(mission).toBeUndefined())\r\n//         .catch(() => {\r\n//           done();\r\n//         });\r\n//   });\r\n//\r\n//   it(\"should update mission from db\", async (done) => {\r\n//     expect.assertions(5);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     const newName = \"test2\";\r\n//     missionAdded.name = newName;\r\n//     const missionReturnFromUpdate = await missionMethod.update(missionAdded);\r\n//     expect(missionReturnFromUpdate).toBeDefined();\r\n//     expect(missionReturnFromUpdate.name).toEqual(newName);\r\n//     const missionUpdated = await missionMethod.get(missionAdded._id);\r\n//     expect(missionUpdated).toBeDefined();\r\n//     expect(missionUpdated.name).toEqual(newName);\r\n//     done();\r\n//   });\r\n//\r\n//   it(\"should update field in mission from db\", async (done) => {\r\n//     expect.assertions(5);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     const fieldToUpdate = { name: \"test2\" };\r\n//     const missionReturnFromUpdate = await missionMethod.updateField(missionAdded._id, fieldToUpdate);\r\n//     expect(missionReturnFromUpdate).toBeDefined();\r\n//     expect(missionReturnFromUpdate.name).toEqual(fieldToUpdate.name);\r\n//     const missionUpdated = await missionMethod.get(missionAdded._id);\r\n//     expect(missionUpdated).toBeDefined();\r\n//     expect(missionUpdated.name).toEqual(fieldToUpdate.name);\r\n//     done();\r\n//   });\r\n//\r\n//   it(\"should remove mission from db\", (done) => {\r\n//     return missionMethod.removeAll().then(() => {\r\n//       done();\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//\r\n// });\r\n"]}