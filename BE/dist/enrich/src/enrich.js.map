{"version":3,"file":"enrich.js","sourceRoot":"","sources":["../../../enrich/src/enrich.ts"],"names":[],"mappings":";;AACA,gEAAoE;AACpE,sFAAmF;AAInF,oFAAgF;AAChF,2EAAqE;AACrE,kFAAqF;AAExE,QAAA,eAAe,GAAG,qBAAqB,CAAC;AAErD;IAQE;QACE,IAAI,CAAC,MAAM,GAAiB,IAAI,6BAAa,CAAC,0CAAkB,CAAC,CAAC,WAAW,CAAC;QAC9E,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,qCAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAChI,IAAI,CAAC,WAAW,GAAG,IAAI,0BAAW,EAAE,CAAC;QAErC,IAAI,CAAC,SAAS,GAAG;YACf,OAAO,EAAE,CAAC;YACV,SAAS,EAAE,CAAC;YACZ,SAAS,EAAE,CAAC;YACZ,cAAc,EAAE,CAAC;SAClB,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;aAC5B,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACT,CAAC;IAED,mBAAmB;QAEjB,MAAM,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAE9B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;YAC1C,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACjC,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,cAAc,GAAG,UAAU,CAAC,KAAK,EAAE;gBACrC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpB,IAAI,EAAE,CAAC;aACR;iBACI;gBACH,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrF,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBAClE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACpB,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,GAAG;QACf,MAAM,IAAI,GAAG,GAAG,CAAC;QACjB,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACf,MAAM,OAAO,qBAAQ,CAAC,IAAE,MAAM,EAAE,EAAE,GAAE,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;CAEF;AAlED,wBAkEC","sourcesContent":["import * as RSMQWorker from 'rsmq-worker';\r\nimport { RedisAdapter } from '../../shared/src/modules/redis/redis';\r\nimport { ConfigHandler } from '../../shared/src/modules/configSetup/configHandler';\r\nimport * as path from 'path';\r\nimport { EnrichConfig } from './model/EnrichConfig';\r\nimport { TimeSetup } from '../../shared/src/modules/measureTime/TimeSetup';\r\nimport { MeasureTime } from '../../shared/src/modules/measureTime/measeuerTime';\r\nimport { ConfigFileLocation } from '../config/config.enrich.default';\r\nimport { RedisMQWorkerAdapter } from '../../shared/src/modules/redis/redisMQ-worker';\r\n\r\nexport const DEV_ENVIRONMENT = 'goldStarDevelopment';\r\n\r\nexport class Enrich {\r\n\r\n  redis: RedisAdapter;\r\n  worker: RSMQWorker;\r\n  config: EnrichConfig;\r\n  timeSetup: TimeSetup;\r\n  measureTime: MeasureTime;\r\n\r\n  constructor() {\r\n    this.config = <EnrichConfig>new ConfigHandler(ConfigFileLocation).finalConfig;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    console.log(this.config)\r\n    this.redis = new RedisAdapter(this.config.redisConfig);\r\n    this.worker = new RedisMQWorkerAdapter(this.config.redisConfig.config_redisQueueName, this.config.redisConfig.config_redisHost);\r\n    this.measureTime = new MeasureTime();\r\n\r\n    this.timeSetup = {\r\n      avgTime: 0,\r\n      roundTime: 0,\r\n      totalTime: 0,\r\n      numberOfRounds: 0\r\n    };\r\n\r\n    this.redis.initClientConnection()\r\n        .then(() => {\r\n          this.getMessageFromRedis();\r\n          this.worker.start();\r\n        });\r\n  }\r\n\r\n  getMessageFromRedis() {\r\n\r\n    const redisStartTime = new Date().getTime();\r\n    console.log('enrich started');\r\n\r\n    this.worker.on('message', (msg, next, id) => {\r\n      const end = new Date().getTime();\r\n      const parsedData = (JSON.parse(msg));\r\n      if (redisStartTime > parsedData.start) {\r\n        console.log('pass');\r\n        next();\r\n      }\r\n      else {\r\n        this.measureTime.showMeasureTime(end, parsedData.start, this.timeSetup, this.config);\r\n        const newList = this.createNewList(parsedData.message);\r\n        this.redis.sendToQueue(newList, this.config.config_keyId).then(() => {\r\n          this.worker.del(id);\r\n          next();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  createNewList(msg): Array<any> {\r\n    const data = msg;\r\n    const newList = [];\r\n    data.forEach(x => {\r\n      const newData = { ...x, status: 12 };\r\n      newList.push(newData);\r\n    });\r\n    return newList;\r\n  }\r\n\r\n}"]}