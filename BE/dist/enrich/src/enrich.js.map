{"version":3,"file":"enrich.js","sourceRoot":"","sources":["../../../enrich/src/enrich.ts"],"names":[],"mappings":";;AACA,oDAAwD;AACxD,0EAAuE;AAIvE,wEAAoE;AACpE,2EAAqE;AACrE,sEAAyE;AAE5D,QAAA,eAAe,GAAG,qBAAqB,CAAC;AAErD;IAQE;QACE,IAAI,CAAC,MAAM,GAAiB,IAAI,6BAAa,CAAC,0CAAkB,CAAC,CAAC,WAAW,CAAC;QAC9E,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,IAAI;QACF,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,qCAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAChI,IAAI,CAAC,WAAW,GAAG,IAAI,0BAAW,EAAE,CAAC;QAErC,IAAI,CAAC,SAAS,GAAG;YACf,OAAO,EAAE,CAAC;YACV,SAAS,EAAE,CAAC;YACZ,SAAS,EAAE,CAAC;YACZ,cAAc,EAAE,CAAC;SAClB,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;aAC5B,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACT,CAAC;IAED,mBAAmB;QAEjB,MAAM,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAE9B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;YAC1C,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACjC,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,cAAc,GAAG,UAAU,CAAC,KAAK,EAAE;gBACrC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACpB,IAAI,EAAE,CAAC;aACR;iBACI;gBACH,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrF,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBAClE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACpB,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,GAAG;QACf,MAAM,IAAI,GAAG,GAAG,CAAC;QACjB,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACf,MAAM,OAAO,qBAAQ,CAAC,IAAE,MAAM,EAAE,EAAE,GAAE,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;CAEF;AAjED,wBAiEC","sourcesContent":["import * as RSMQWorker from 'rsmq-worker';\nimport { RedisAdapter } from '../../shared/redis/redis';\nimport { ConfigHandler } from '../../shared/configSetup/configHandler';\nimport * as path from 'path';\nimport { EnrichConfig } from './model/EnrichConfig';\nimport { TimeSetup } from '../../shared/measureTime/TimeSetup';\nimport { MeasureTime } from '../../shared/measureTime/measeuerTime';\nimport { ConfigFileLocation } from '../config/config.enrich.default';\nimport { RedisMQWorkerAdapter } from '../../shared/redis/redisMQ-worker';\n\nexport const DEV_ENVIRONMENT = 'goldStarDevelopment';\n\nexport class Enrich {\n\n  redis: RedisAdapter;\n  worker: RSMQWorker;\n  config: EnrichConfig;\n  timeSetup: TimeSetup;\n  measureTime: MeasureTime;\n\n  constructor() {\n    this.config = <EnrichConfig>new ConfigHandler(ConfigFileLocation).finalConfig;\n    this.init();\n  }\n\n  init() {\n    this.redis = new RedisAdapter(this.config.redisConfig);\n    this.worker = new RedisMQWorkerAdapter(this.config.redisConfig.config_redisQueueName, this.config.redisConfig.config_redisHost);\n    this.measureTime = new MeasureTime();\n\n    this.timeSetup = {\n      avgTime: 0,\n      roundTime: 0,\n      totalTime: 0,\n      numberOfRounds: 0\n    };\n\n    this.redis.initClientConnection()\n        .then(() => {\n          this.getMessageFromRedis();\n          this.worker.start();\n        });\n  }\n\n  getMessageFromRedis() {\n\n    const redisStartTime = new Date().getTime();\n    console.log('enrich started');\n\n    this.worker.on('message', (msg, next, id) => {\n      const end = new Date().getTime();\n      const parsedData = (JSON.parse(msg));\n      if (redisStartTime > parsedData.start) {\n        console.log('pass');\n        next();\n      }\n      else {\n        this.measureTime.showMeasureTime(end, parsedData.start, this.timeSetup, this.config);\n        const newList = this.createNewList(parsedData.message);\n        this.redis.sendToQueue(newList, this.config.config_keyId).then(() => {\n          this.worker.del(id);\n          next();\n        });\n      }\n    });\n  }\n\n  createNewList(msg): Array<any> {\n    const data = msg;\n    const newList = [];\n    data.forEach(x => {\n      const newData = { ...x, status: 12 };\n      newList.push(newData);\n    });\n    return newList;\n  }\n\n}"]}