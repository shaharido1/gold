{"version":3,"file":"producer.js","sourceRoot":"","sources":["../../../../mock/mock_prod/src/producer.ts"],"names":[],"mappings":";;AACA,0DAA8D;AAE9D,6EAA0E;AAC1E,+DAA+D;AAG/D,uDAA2D;AAC3D,2CAA2C;AAG3C;IAQE,YAAY,SAAiB,EAAE,YAAoB;QACjD,IAAI,CAAC,MAAM,GAAmB,IAAI,6BAAa,CAAC,oCAAkB,CAAC,CAAC,WAAW,CAAC;QAChF,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1B,CAAC;IAEO,aAAa,CAAC,SAAS;QAC7B,IAAI,SAAS,KAAK,kBAAS,CAAC,MAAM,EAAE;YAClC,IAAI,CAAC,KAAK,GAAG,kBAAS,CAAC,MAAM,CAAC;YAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,sBAAa,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAClE;aACI,IAAI,SAAS,KAAK,kBAAS,CAAC,KAAK,EAAE;YACtC,IAAI,CAAC,KAAK,GAAG,kBAAS,CAAC,KAAK,CAAC;YAC7B,IAAI,CAAC,YAAY,GAAG,IAAI,oBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SAC/D;IACH,CAAC;IAED,YAAY;QACV,4BAA4B;QAC5B,6DAA6D;QAC7D,uDAAuD;QACvD,6EAA6E;IAC/E,CAAC;IAEM,IAAI,CAAC,YAAY;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAA;IAC5C,CAAC;IAED,eAAe,CAAC,GAAqB;QACnC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC;CAIF;AA7CD,oCA6CC","sourcesContent":["import { ProducerConfig } from './model/producer.config.interface';\r\nimport { RabbitAdapter } from '../../../shared/rabbit/rabbit';\r\nimport { MockDataGenerator } from './mockDataGeneretor/mockDataGeneretor';\r\nimport { ConfigHandler } from '../../../shared/configSetup/configHandler';\r\nimport { configFileLocation } from '../config/config.filePath';\r\nimport { levels } from '../../../shared/logHandler/modle/logerOptions';\r\nimport { LoggerHandler } from '../../../shared/logHandler/logHendler';\r\nimport { RedisAdapter } from '../../../shared/redis/redis';\r\nimport { QueueTipe } from './model/Qtypes';\r\nimport { Observable } from 'rxjs/index';\r\n\r\nexport class MockProducer {\r\n  private config: ProducerConfig;\r\n  private rabbitAdapter: RabbitAdapter;\r\n  private redisAdapter: RedisAdapter;\r\n  private loggerHandler: LoggerHandler;\r\n  private QType: string;\r\n\r\n\r\n  constructor(QueueType: string, timeToRepeat: number) {\r\n    this.config = <ProducerConfig>new ConfigHandler(configFileLocation).finalConfig;\r\n    this.queueTypeTest(QueueType);\r\n    this.logesHandler();\r\n    this.init(timeToRepeat);\r\n  }\r\n\r\n  private queueTypeTest(QueueType): void {\r\n    if (QueueType === QueueTipe.rabbit) {\r\n      this.QType = QueueTipe.rabbit;\r\n      this.rabbitAdapter = new RabbitAdapter(this.config.rabbitConfig);\r\n    }\r\n    else if (QueueType === QueueTipe.redis) {\r\n      this.QType = QueueTipe.redis;\r\n      this.redisAdapter = new RedisAdapter(this.config.redisConfig);\r\n    }\r\n  }\r\n\r\n  logesHandler() {\r\n    // todo finish loggerHandler\r\n    // const loggerSetup = { name: 'producer', path: __dirname };\r\n    // this.loggerHandler = new LoggerHandler(loggerSetup);\r\n    // this.loggerHandler.loggerWrite(levels.TRACE, 'producer starting to work');\r\n  }\r\n\r\n  public init(timeToRepeat) {\r\n    return this.rabbitAdapter.initConnection()\r\n  }\r\n\r\n  generateToQueue(obs : Observable<any>) {\r\n    obs.subscribe(data => {\r\n      this.rabbitAdapter.sendToQueue(data);\r\n    })\r\n  }\r\n\r\n\r\n\r\n}\r\n"]}