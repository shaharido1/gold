{"version":3,"file":"mockDataGeneretor.js","sourceRoot":"","sources":["../../../../../mock/mock_prod/src/mockDataGeneretor/mockDataGeneretor.ts"],"names":[],"mappings":";;AAAA,+BAA0B;AAE1B,sCAAwC;AAExC;IAAA;QACU,aAAQ,GAAG,CAAC,CAAC;IAqCvB,CAAC;IAnCC,MAAM,CAAC,WAAW,CAAC,WAAW;QAC5B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,QAAQ,GAAyB,EAAE,CAAC;QAC1C,OAAO,CAAC,GAAG,WAAW,EAAE;YACtB,MAAM,GAAG,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,SAAE,EAAE,EAAE,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,EAAE,CAAC;SACL;QACD,OAAO,iBAAiB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,OAAmB;QACzC,MAAM,EAAE,GAAG;YACT,OAAO;YACP,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;SAClC,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAGD,MAAM,CAAC,gBAAgB,CAAC,YAAoB;QAC1C,OAAO,IAAI,kBAAU,CAAC,QAAQ,CAAC,EAAE;YAC/B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;gBAChC,IAAI,EAAE,IAAI,CAAC,QAAQ,KAAK,YAAY,EAAE;oBACpC,aAAa,CAAC,QAAQ,CAAC,CAAC;iBACzB;gBACD,MAAM,KAAK,GAAG,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;gBAC5E,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrB,2CAA2C;YAC7C,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAA;IACJ,CAAC;CAEF;AAtCD,8CAsCC","sourcesContent":["import { v4 } from 'uuid';\r\nimport { MockDataType } from './mockDataType';\r\nimport { Observable } from 'rxjs/index';\r\n\r\nexport class MockDataGenerator {\r\n  private repeated = 0;\r\n\r\n  static createBatch(batchNumber): string {\r\n    let i = 0;\r\n    const mockData: Array< MockDataType> = [];\r\n    while (i < batchNumber) {\r\n      const msg = { message: `ms-${i}`, id: v4() };\r\n      mockData.push(msg);\r\n      i++;\r\n    }\r\n    return MockDataGenerator.stringifyMessage(mockData);\r\n  }\r\n\r\n  static stringifyMessage(message: Array<any>): string {\r\n    const js = {\r\n      message,\r\n      rabbitStart: new Date().getTime()\r\n    };\r\n\r\n    return JSON.stringify(js);\r\n  }\r\n\r\n\r\n  static generateMockData(timeToRepeat: number) : Observable<any> {\r\n    return new Observable(observer => {\r\n      const interval = setInterval(() => {\r\n        if (++this.repeated === timeToRepeat) {\r\n          clearInterval(interval);\r\n        }\r\n        const batch = MockDataGenerator.createBatch(this.config.config_batchNumber);\r\n        console.log(batch);\r\n        observer.next(batch);\r\n        // }, this.config.config_batchNumber / 10);\r\n      }, 2000);\r\n    })\r\n  }\r\n\r\n}"]}