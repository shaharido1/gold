{"version":3,"file":"mockDataGeneretor.js","sourceRoot":"","sources":["../../../../../mock/mock_prod/src/mockDataGeneretor/mockDataGeneretor.ts"],"names":[],"mappings":";;AAAA,+BAA0B;AAE1B,sCAAwC;AAExC;IAIU,MAAM,CAAC,WAAW,CAAC,WAAW;QACpC,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,QAAQ,GAAwB,EAAE,CAAC;QACzC,OAAO,CAAC,GAAG,WAAW,EAAE;YACtB,MAAM,GAAG,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,SAAE,EAAE,EAAE,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,EAAE,CAAC;SACL;QACD,OAAO,iBAAiB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,OAAmB;QACjD,MAAM,EAAE,GAAG;YACT,OAAO;YACP,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;SAClC,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAGM,gBAAgB,CAAC,YAAoB,EAAE,WAAmB;QAC/D,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,OAAO,IAAI,kBAAU,CAAC,QAAQ,CAAC,EAAE;YAC/B,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;gBAC/B,IAAI,EAAE,QAAQ,KAAK,YAAY,EAAE;oBAC/B,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC3B;gBACD,MAAM,KAAK,GAAG,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACzD,sBAAsB;gBACtB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrB,2CAA2C;YAC7C,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB;QACvB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC7B;IACH,CAAC;CAEF;AA/CD,8CA+CC","sourcesContent":["import { v4 } from 'uuid';\nimport { MockDataType } from './mockDataType';\nimport { Observable } from 'rxjs/index';\n\nexport class MockDataGenerator {\n  private interval: any;\n\n\n  private static createBatch(batchNumber): string {\n    let i = 0;\n    const mockData: Array<MockDataType> = [];\n    while (i < batchNumber) {\n      const msg = { message: `ms-${i}`, id: v4() };\n      mockData.push(msg);\n      i++;\n    }\n    return MockDataGenerator.stringifyMessage(mockData);\n  }\n\n  private static stringifyMessage(message: Array<any>): string {\n    const js = {\n      message,\n      rabbitStart: new Date().getTime()\n    };\n\n    return JSON.stringify(js);\n  }\n\n\n  public generateMockData(timeToRepeat: number, batchNumber: number): Observable<any> {\n    let repeated = 0;\n    this.killSourceMockData();\n    return new Observable(observer => {\n      this.interval = setInterval(() => {\n        if (++repeated === timeToRepeat) {\n          this.killSourceMockData();\n        }\n        const batch = MockDataGenerator.createBatch(batchNumber);\n        // console.log(batch);\n        observer.next(batch);\n        // }, this.config.config_batchNumber / 10);\n      }, 2000);\n    });\n  }\n\n  public killSourceMockData() {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n}"]}