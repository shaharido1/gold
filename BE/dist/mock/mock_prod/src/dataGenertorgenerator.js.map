{"version":3,"file":"dataGenertorgenerator.js","sourceRoot":"","sources":["../../../../mock/mock_prod/src/dataGenertorgenerator.ts"],"names":[],"mappings":";;AAAA,kFAA+E;AAC/E,6EAA0E;AAC1E,+DAA+D;AAC/D,4EAAyE;AAEzE,wGAAqG;AAIrG,mBAA2B,SAAQ,uBAAU;IAS3C;QACE,KAAK,CAAC,oCAAkB,CAAC,CAAC;QAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,IAAI;QACF,IAAI,CAAC,WAAW,GAAG,IAAI,qCAAiB,EAAE,CAAC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,IAAI,iDAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACvC,IAAI,KAAK,GAAG,OAAO,IAAI,SAAS;gBAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC;aACpI,KAAK,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;YACtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACT,CAAC;CAGF;AAnCD,sCAmCC","sourcesContent":["import { GoldServer } from '../../../shared/src/modules/goldServer/goldServer';\r\nimport { MockDataGenerator } from './mockDataGeneretor/mockDataGeneretor';\r\nimport { configFileLocation } from '../config/config.filePath';\r\nimport { Producer } from '../../../shared/src/modules/producer/producer';\r\nimport { Observable } from 'rxjs/index';\r\nimport { RabbitConnectionManager } from '../../../shared/src/modules/rabbit/rabbitConnectionManager';\r\nimport { EventEmitter } from 'events';\r\n\r\n\r\nexport class DataGenerator extends GoldServer {\r\n\r\n  private source: Observable<any>;\r\n  private mockDataGen: MockDataGenerator;\r\n  private connectionManager: RabbitConnectionManager;\r\n  private producer: Producer;\r\n  private eventListener: EventEmitter;\r\n\r\n\r\n  constructor() {\r\n    super(configFileLocation);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.mockDataGen = new MockDataGenerator();\r\n    this.connectionManager = new RabbitConnectionManager(this.config.rabbitConfig);\r\n    this.producer = new Producer(this.config.rabbitConfig, this.connectionManager);\r\n    this.producer.listener.subscribe(event => {\r\n      if (event = 'ready' || 'recover')\r\n        this.sendSourceToQueue();\r\n    });\r\n\r\n  }\r\n\r\n  sendSourceToQueue() {\r\n    this.source = this.mockDataGen.generateMockData(Infinity, 10);\r\n    this.producer.generateToQueue(this.source, this.config.rabbitConfig.config_rabbitQueueName, this.config.rabbitConfig.config_queueOptions)\r\n        .catch(() => {\r\n          this.mockDataGen.killSourceMockData();\r\n          this.sendSourceToQueue();\r\n        });\r\n  }\r\n\r\n\r\n}"]}