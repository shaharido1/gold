{"version":3,"file":"producer.js","sourceRoot":"","sources":["../../../mock/mock_prod/producer.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA6B;AAG7B,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAElC,mDAAuD;AACvD,8EAA2E;AAE3E;IAKE;QACE,MAAM,SAAS,GAAG,oCAAoC,CAAC;QAEvD,MAAM,cAAc,GAAI,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;YAC1C,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,0BAA0B,CAAC;QAEzE,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QACzD,MAAM,aAAa,GAAG,IAAI,6BAAa,EAAE,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACnD,IAAI,CAAC,aAAa,GAAG,IAAI,sBAAa,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACnE,CAAC;IAED,aAAa;QACX,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,qBAAqB,CAAC,CAAA;IAC3F,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;YACvD,WAAW,CAAC,GAAG,EAAE;gBACf,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;gBAC/D,MAAM,cAAc,GAAG,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBACxD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YACjD,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,kBAAkB,GAAG,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,WAAW,CAAC,WAAW;QAC7B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,WAAW,EAAE;YACtB,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;YACpB,MAAM,GAAG,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;YAChD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,EAAE,CAAC;SACL;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,OAAe;QACrC,MAAM,EAAE,GAAG;YACT,OAAO;YACP,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;SAClC,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACjC,4GAA4G;QAC5G,OAAO,KAAK,CAAC;IACf,CAAC;CAEF;AArDD,4BAqDC","sourcesContent":["import * as path from \"path\";\nimport { ProducerConfig } from './model/producer.config.interface';\n\nconst uuidv4 = require('uuid/v4');\nimport { RabbitConfig } from '../../../shared/interfase/rabitConfig';\nimport { RabbitAdapter } from '../../../shared/rabbit';\nimport { ConfigHandler } from '../../../shared/configServer/configHandler';\n\nexport class Producer {\n  config: ProducerConfig;\n  rabbitConfig: RabbitConfig;\n  private rabbitAdapter: RabbitAdapter;\n\n  constructor() {\n    const LocalPath = '../../../../src/config/config.json';\n\n    const configLocation =  this.isDevelopment() ?\n        LocalPath : process.env.configLocation || './src/config/config.json';\n\n    const configPatch = path.join(__dirname, configLocation);\n    const configHandler = new ConfigHandler();\n    this.config = configHandler.getConfig(configPatch);\n    this.rabbitAdapter = new RabbitAdapter(this.config.rabbitConfig);\n  }\n\n  isDevelopment() {\n    return Object.keys(process.argv).some(key => process.argv[key] === \"goldStarDevelopment\")\n  }\n\n  public init() {\n    this.rabbitAdapter.initConnection().then(({ channel }) => {\n      setInterval(() => {\n        const batch = this.createBatch(this.config.config_batchNumber);\n        const stringifyBatch = Producer.stringifyMessage(batch);\n        this.rabbitAdapter.sendToQueue(stringifyBatch);\n      }, this.config.config_batchNumber / 10);\n    });\n  }\n\n  private createBatch(batchNumber): Array<{ message: string, id: string }> {\n    let i = 0;\n    const mockData = [];\n    while (i < batchNumber) {\n      const id = uuidv4();\n      const msg = { massage: `ms-${i}`, id: `${id}` };\n      mockData.push(msg);\n      i++;\n    }\n    return mockData;\n  }\n\n  static stringifyMessage(message: object): String {\n    const js = {\n      message,\n      rabbitStart: new Date().getTime()\n    };\n    const batch = JSON.stringify(js);\n    /* const stringIfyBatch = `{\"message\":${JSON.stringify(message)} ,\"rabbitStart\":${new Date().getTime()}}`;*/\n    return batch;\n  }\n\n}\n\n"]}