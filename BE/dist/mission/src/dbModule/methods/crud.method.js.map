{"version":3,"file":"crud.method.js","sourceRoot":"","sources":["../../../../../mission/src/dbModule/methods/crud.method.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogService } from \"../../logs/logHandler\";\n\nexport class CrudMethod {\n  mongoModel;\n  logService: LogService;\n  constructor(mongoModel, logService?) {\n    this.mongoModel = mongoModel;\n    this.logService = logService || {\n      log : (log) => console.log(log),\n      error : (err) => console.log(err)\n    };\n  }\n\n\n  add(entityToAdd: any): Promise<any>   {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.create(entityToAdd, (err, entityReturn) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            this.logService.log(\"added mission: \" + entityReturn.id);\n            return resolve(entityReturn);\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e);\n        return reject(e);\n      }\n    });\n  }\n\n\n  get(entityId: any): Promise<any>  {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.findOne(entityId, (err, entityReturn) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            if (entityReturn) {\n              this.logService.log(\"got mission: \" + entityReturn.id);\n            }\n            else {\n              this.logService.error(\"mission id:\" + entityId + \"doesn't exist\");\n              entityReturn = {};\n            }\n            return resolve(entityReturn);\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e) ;\n        return reject(e);\n      }\n    });\n  }\n\n  getAll(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.find({}, (err, entityReturn) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            this.logService.log(\"got all missions\");\n            return resolve(entityReturn);\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e);\n        return reject(e);\n      }\n    });\n  }\n\n  remove(entityId: any): Promise<any>  {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.remove({_id : entityId}, (err, entityReturn) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            this.logService.log(\"remove mission: \" + entityReturn.id);\n            return resolve(entityReturn);\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e);\n        return reject(e);\n      }\n    });\n  }\n\n  update(updatedEntity: any): Promise<any>  {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.findByIdAndUpdate({_id: updatedEntity._id}, updatedEntity, {new: true}, (err, entityReturn) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            this.logService.log(\"update mission: \" + entityReturn.id);\n            return resolve(entityReturn);\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e);\n        return reject(e);\n      }\n    });\n  }\n\n  updateField(entityId, updatedField): Promise<any>  {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.findByIdAndUpdate({_id: entityId}, {\"$set\" : updatedField}, {new: true}, (err, entityReturn) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            this.logService.log(\"update mission: \" + entityReturn.id);\n            return resolve(entityReturn);\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e);\n        return reject(e);\n      }\n    });\n  }\n\n  removeAll() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.mongoModel.remove({}, (err) => {\n          if (err) {\n            this.logService.error(err);\n            return reject(err);\n          }\n          else {\n            this.logService.log(\"remove all: \");\n            return resolve();\n          }\n        });\n      }\n      catch (e) {\n        this.logService.error(e);\n        return reject(e);\n      }\n    });\n  }\n}\n\n"]}