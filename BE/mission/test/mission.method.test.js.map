{"version":3,"file":"mission.method.test.js","sourceRoot":"","sources":["mission.method.test.ts"],"names":[],"mappings":"AAAA,uEAAuE;AACvE,gEAAgE;AAChE,mDAAmD;AACnD,kDAAkD;AAClD,EAAE;AACF,EAAE;AACF,sCAAsC;AACtC,uBAAuB;AACvB,2BAA2B;AAC3B,oBAAoB;AACpB,OAAO;AACP,EAAE;AACF,gCAAgC;AAChC,oDAAoD;AACpD,gDAAgD;AAChD,uDAAuD;AACvD,cAAc;AACd,QAAQ;AACR,EAAE;AACF,yBAAyB;AACzB,kCAAkC;AAClC,QAAQ;AACR,EAAE;AACF,EAAE;AACF,2CAA2C;AAC3C,4BAA4B;AAC5B,+DAA+D;AAC/D,uCAAuC;AACvC,uBAAuB;AACvB,6CAA6C;AAC7C,UAAU;AACV,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,mDAAmD;AACnD,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,mEAAmE;AACnE,uCAAuC;AACvC,uBAAuB;AACvB,6CAA6C;AAC7C,UAAU;AACV,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,iDAAiD;AACjD,4BAA4B;AAC5B,uDAAuD;AACvD,wCAAwC;AACxC,wBAAwB;AACxB,iDAAiD;AACjD,UAAU;AACV,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,0DAA0D;AAC1D,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,oDAAoD;AACpD,iDAAiD;AACjD,4DAA4D;AAC5D,yBAAyB;AACzB,oBAAoB;AACpB,cAAc;AACd,QAAQ;AACR,EAAE;AACF,0DAA0D;AAC1D,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,+BAA+B;AAC/B,mCAAmC;AACnC,gFAAgF;AAChF,qDAAqD;AACrD,6DAA6D;AAC7D,wEAAwE;AACxE,4CAA4C;AAC5C,oDAAoD;AACpD,cAAc;AACd,QAAQ;AACR,EAAE;AACF,mEAAmE;AACnE,4BAA4B;AAC5B,kEAAkE;AAClE,8CAA8C;AAC9C,+CAA+C;AAC/C,wGAAwG;AACxG,qDAAqD;AACrD,wEAAwE;AACxE,wEAAwE;AACxE,4CAA4C;AAC5C,+DAA+D;AAC/D,cAAc;AACd,QAAQ;AACR,EAAE;AACF,oDAAoD;AACpD,oDAAoD;AACpD,gBAAgB;AAChB,2CAA2C;AAC3C,QAAQ;AACR,EAAE;AACF,EAAE;AACF,MAAM","sourcesContent":["// import { MissionMethods } from \"../dbModule/methods/mission.method\";\r\n// import { Mission } from \"../dbModule/schemas/mission.schema\";\r\n// import { DBManager } from \"../dbModule/connect\";\r\n// import { DBTestConfig } from \"./config/config\";\r\n//\r\n//\r\n// describe(\"test DB methods\", () => {\r\n//   let missionMethod;\r\n//   const missionToAdd = {\r\n//     name: \"test1\"\r\n//   };\r\n//\r\n//   beforeAll(async (done) => {\r\n//     // await DBManager.connect(DBTestConfig.url);\r\n//     const initMission = await Mission.init();\r\n//     missionMethod = new MissionMethods(initMission);\r\n//     done();\r\n//   });\r\n//\r\n//   afterAll((done) => {\r\n//     DBManager.disconnect(done);\r\n//   });\r\n//\r\n//\r\n//   it(\"should add mission to db\", () => {\r\n//     expect.assertions(2);\r\n//     return missionMethod.add(missionToAdd).then(mission => {\r\n//       expect(mission).toBeDefined();\r\n//       if (mission) {\r\n//         expect(mission._id).toBeDefined();\r\n//       }\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//   it(\"should get mission from db\", async () => {\r\n//     expect.assertions(3);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     return missionMethod.get(missionAdded._id).then(mission => {\r\n//       expect(mission).toBeDefined();\r\n//       if (mission) {\r\n//         expect(mission._id).toBeDefined();\r\n//       }\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//   it(\"should get all mission from db\", () => {\r\n//     expect.assertions(2);\r\n//     return missionMethod.getAll().then(missions => {\r\n//       expect(missions).toBeDefined();\r\n//       if (missions) {\r\n//         expect(missions.length).toBeDefined();\r\n//       }\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//   it(\"should remove mission from db\", async (done) => {\r\n//     expect.assertions(2);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     await missionMethod.remove(missionAdded._id);\r\n//     return missionMethod.get(missionAdded._id)\r\n//         .then(mission => expect(mission).toBeUndefined())\r\n//         .catch(() => {\r\n//           done();\r\n//         });\r\n//   });\r\n//\r\n//   it(\"should update mission from db\", async (done) => {\r\n//     expect.assertions(5);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     const newName = \"test2\";\r\n//     missionAdded.name = newName;\r\n//     const missionReturnFromUpdate = await missionMethod.update(missionAdded);\r\n//     expect(missionReturnFromUpdate).toBeDefined();\r\n//     expect(missionReturnFromUpdate.name).toEqual(newName);\r\n//     const missionUpdated = await missionMethod.get(missionAdded._id);\r\n//     expect(missionUpdated).toBeDefined();\r\n//     expect(missionUpdated.name).toEqual(newName);\r\n//     done();\r\n//   });\r\n//\r\n//   it(\"should update field in mission from db\", async (done) => {\r\n//     expect.assertions(5);\r\n//     const missionAdded = await missionMethod.add(missionToAdd);\r\n//     expect(missionAdded._id).toBeDefined();\r\n//     const fieldToUpdate = { name: \"test2\" };\r\n//     const missionReturnFromUpdate = await missionMethod.updateField(missionAdded._id, fieldToUpdate);\r\n//     expect(missionReturnFromUpdate).toBeDefined();\r\n//     expect(missionReturnFromUpdate.name).toEqual(fieldToUpdate.name);\r\n//     const missionUpdated = await missionMethod.get(missionAdded._id);\r\n//     expect(missionUpdated).toBeDefined();\r\n//     expect(missionUpdated.name).toEqual(fieldToUpdate.name);\r\n//     done();\r\n//   });\r\n//\r\n//   it(\"should remove mission from db\", (done) => {\r\n//     return missionMethod.removeAll().then(() => {\r\n//       done();\r\n//     }).catch((err) => console.log(err));\r\n//   });\r\n//\r\n//\r\n// });\r\n"]}