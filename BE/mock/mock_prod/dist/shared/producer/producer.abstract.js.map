{"version":3,"file":"producer.abstract.js","sourceRoot":"","sources":["../../../../../shared/producer/producer.abstract.ts"],"names":[],"mappings":";;AAMA;IAIE,YAAY,YAAY,EAAE,iBAAiB;QACzC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,IAAI;QACT,OAAO;QACP,cAAc;QACd,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,cAA8B,EAAE,EAAE;gBACrF,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;gBAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;gBACrC,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,WAAW;QAChB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;IACzC,CAAC;IAEM,eAAe,CAAC,GAAoB,EAAE,KAAa,EAAE,OAAwB;QAClF,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC3D,UAAU,CAAC,WAAW,EAAE,CAAC;oBACzB,MAAM,CAAC,MAAM,EAAE,CAAA;gBACjB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAGF;AAtCD,4BAsCC","sourcesContent":["import { RabbitProducer } from '../rabbit/rabbitProducer';\r\nimport { Options } from 'amqplib/properties';\r\nimport { Observable } from 'rxjs/index';\r\nimport { RabbitConnectionManager } from '../rabbit/rabbitConnectionManager';\r\n\r\n\r\nexport class Producer {\r\n  protected rabbitProducer: RabbitProducer;\r\n  private connectionManager: RabbitConnectionManager;\r\n\r\n  constructor(rabbitConfig, connectionManager) {\r\n    this.connectionManager = connectionManager;\r\n  }\r\n\r\n  public init(): Promise<void> {\r\n    // enum\r\n    // only one...\r\n    console.log(\"init producer\")\r\n    return new Promise((resolve, reject) => {\r\n      this.connectionManager.spawnQueueWorker(false).then((rabbitProducer: RabbitProducer) => {\r\n        console.log(\"new worker spwan\")\r\n        this.rabbitProducer = rabbitProducer;\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n\r\n  public sendToQueue() {\r\n    return this.rabbitProducer.sendToQueue;\r\n  }\r\n\r\n  public generateToQueue(obs: Observable<any>, qname: string, options: Options.Consume) {\r\n    return new Promise((resolve, reject) => {\r\n      const subscriber = obs.subscribe(data => {\r\n        console.log(\"d?\")\r\n        if (!this.rabbitProducer.sendToQueue(data, qname, options)) {\r\n          subscriber.unsubscribe();\r\n          return reject()\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"]}